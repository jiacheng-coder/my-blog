import{_ as s,o as a,c as n,U as l}from"./chunks/framework.a7041386.js";const d=JSON.parse('{"title":"React 事件机制","description":"","frontmatter":{"tag":["React"]},"headers":[],"relativePath":"React/React 事件机制.md","filePath":"React/React 事件机制.md","lastUpdated":1690701222000}'),e={name:"React/React 事件机制.md"},o=l(`<h1 id="react-事件机制" tabindex="-1">React 事件机制 <a class="header-anchor" href="#react-事件机制" aria-label="Permalink to &quot;React 事件机制&quot;">​</a></h1><h2 id="前置知识" tabindex="-1">前置知识 <a class="header-anchor" href="#前置知识" aria-label="Permalink to &quot;前置知识&quot;">​</a></h2><ul><li>事件冒泡</li><li>事件委托</li><li>函数式编程「React 官方是十分推崇函数式编程的」 <ul><li>纯函数</li><li>了解什么是副作用</li><li>不可变状态 <ul><li>可以使用一些npm包，使用可变的代码来操作状态</li></ul></li></ul></li><li>拓展运算符 ...</li></ul><h2 id="react-事件机制「原理」" tabindex="-1">React 事件机制「原理」 <a class="header-anchor" href="#react-事件机制「原理」" aria-label="Permalink to &quot;React 事件机制「原理」&quot;">​</a></h2><h3 id="事件机制" tabindex="-1">事件机制 <a class="header-anchor" href="#事件机制" aria-label="Permalink to &quot;事件机制&quot;">​</a></h3><blockquote><p>事件机制，fiber架构，react调度机制，优先级概念，commit 以及 render两个阶段 以及hooks原理 -&gt; 重难点</p></blockquote><ul><li><p>React的JSX 写的代码不是真实dom，经过babel编译成React.createElement，ReactElement 之后被react执行，从而在页面中生成真实dom</p></li><li><p>所有的标签属性都不是真实的dom属性，而是会被react进行处理 最终反应到真实dom身上去</p><ul><li>React中的属性分为标签属性和组件属性</li></ul></li><li><p>react的jsx上的标签<strong>不是真实标签</strong>，它会被babel编译为ReactElement，ReactDom再将ReactElement转换为真实dom</p></li><li><p>React 事件和原生的事件行为差不多，基本上原生事件能做到的事情，React 都<strong>复刻</strong>了一遍</p></li><li><p>react 为了节约性能以及实现动态监听，react使用事件委托的机制</p><p>假设我现在有1000个dom，与其我绑定1000个dom事件</p><p>不如我给这1000个dom的父级绑定事件，给父级绑定的话 只需要绑定一个事件就ok了，event.target--—＞指向真正触发事件的元素</p><p>react把事件绑定在了对应的 root 元素上，当某个真实dom触发事件以后，dom事件会随着事件冒泡 一直冒到root元素上，root元素对应的事件处理函数又可以通过</p><p>event.target知道真正触发事件的元素是谁，进而执行处理</p><p>那其实就意味着 对应的jsx所转化的真实dom身上不会绑定任何的真实事件，react会把jsx上所书写的<strong>对应的和事件有关的标签属性</strong>收集起来 找个地方<strong>存起来</strong></p><p>最终真实dom在页面生成，当我们点击对应的真实dom时 事件会冒泡 事件冒泡是不需要绑定真实dom事件也会冒泡的 <strong>最终会冒泡到root 然后root来进行事件的处理</strong></p></li></ul><h3 id="事件池机制" tabindex="-1">事件池机制 <a class="header-anchor" href="#事件池机制" aria-label="Permalink to &quot;事件池机制&quot;">​</a></h3><blockquote><p>React 17以上的版本取消了事件池机制</p><p>事件池机制的本质就是保存对event的引用而不是重新创建另一个event</p></blockquote><ul><li>react里的标签属性事件 对应的event 是哪来的？？【react 捏给你的，和真实dom没有半毛钱关系】</li><li>在16.8以及之前的版本 react为了更好的性能考虑会尝试重用事件</li><li>react会保存引用 只是修改对应的属性值</li></ul><p>⚠️：</p><ul><li>基于React的事件池机制，只要公司用的还是17以下的代码，都要注意<strong>不要在异步环境下访问事件源对象的属性</strong>，例如在调试中发现event.target===null这种情况，就要考虑是否不小心触发了事件池机制</li><li>使用 <strong>e. persist()</strong> 取消事件池机制</li></ul><h2 id="受控组件和非受控组件" tabindex="-1">受控组件和非受控组件 <a class="header-anchor" href="#受控组件和非受控组件" aria-label="Permalink to &quot;受控组件和非受控组件&quot;">​</a></h2><blockquote><p>React中，受控和非受控 我们只在表单组件中去谈【因为只有表单组件才涉及到交互】</p><p>一个组件如果不涉及到交互，他就是一个渲染组件 UI 组件，不用考虑受控和非受控的问题</p></blockquote><p>在表单组件中，判定受控和非受控的标准是什么？【受控标签属性的植入】【标签受控展性 —也可以理解为是一个标记，出现了这个标记则该组件为受控组件]</p><p>在input里面 受控标签属性 是 value 属性</p><p>当你给input设置上value的值以后，input框里面出现什么文字 不再由用户输入说了算，而是由你的这个value值决定</p><p>所有的表单组件都分为受控和非受控：checkbox，radio</p><p>举个例子：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Test</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">setVal</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">isChecked</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">setIsChecked</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handleChange</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handleControllChange</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setVal</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handleChangeCheckBox</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">checked</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handleChangeControllCheckBox</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setIsChecked</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">pre</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">pre</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">checked</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">section</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">非受控元素</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onChange</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">handleChange</span><span style="color:#89DDFF;">}/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">section</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">section</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">受控元素</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onChange</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">handleControllChange</span><span style="color:#89DDFF;">} </span><span style="color:#C792EA;">value</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">}/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">section</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">hr</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">section</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">非受控元素</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">checkbox</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onChange</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">handleChangeCheckBox</span><span style="color:#89DDFF;">}/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">section</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">section</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">受控元素</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">checkbox</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onChange</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">handleChangeControllCheckBox</span><span style="color:#89DDFF;">} </span><span style="color:#C792EA;">checked</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">isChecked</span><span style="color:#89DDFF;">}/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">section</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h2 id="usestate" tabindex="-1">useState <a class="header-anchor" href="#usestate" aria-label="Permalink to &quot;useState&quot;">​</a></h2><ul><li><p>所有 React Hooks 都要在组件作用域的最顶层（top level）调用</p><ul><li>不能写在循环或判断语句里</li></ul></li><li><p>如果你给useState传递的初始化的值是一个函数，那么他必须是一个<strong>纯函数</strong></p><p>纯函数：就是如果我的参数永远一致，那么我的返回值永远一致，换句话说就是函数的执行不会依赖任何其他外部因素</p></li><li><p>setVal 函数在你调用以后他不会立即更新，而是在 React 的<strong>下一次渲染阶段更新</strong> 「commit render」</p><ul><li><p>setVal 是异步的</p></li><li><p>React 会批量更新</p></li><li><p>imutable state 不可变状态 就是你每一次给状态擦传递的值都是不可变化的，也就意味着这个值是一次性的</p><p>如果你想要变更引用类型的状态 则要传递一个新的值进去 =&gt; 拓展运算符 ... 在 数组 or 对象 里的应用</p></li></ul></li></ul><h2 id="useeffect" tabindex="-1">useEffect <a class="header-anchor" href="#useeffect" aria-label="Permalink to &quot;useEffect&quot;">​</a></h2><h3 id="副作用" tabindex="-1">副作用 <a class="header-anchor" href="#副作用" aria-label="Permalink to &quot;副作用&quot;">​</a></h3><p>副作用：完全不依赖React功能的外部操作【这些外部操作不经过React的手, 但是却让对 React 产生了一些影响】</p><ol><li><p>http请求</p></li><li><p>dom操作</p></li><li><p>异步操作通常都会产生副作用</p></li></ol><p>虽然我们不是所有的副作用操作都在useEffect里进行，但是官方建议我们尽可能的将副作用处理放在useEffect中运行</p><p><strong>因为副作用操作他是会产生意料之外的结果的，如果我们想更好的去追踪我们的副作用执行时机，就可以将他们都归纳进</strong></p><p><strong>useEffect里方便追踪</strong></p><p>不一定将所有的操作都放在useEffect里，但是如果你使用到useEffect，就一定要用他来处理副作用 不然的话不要随便用</p><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><p>useEffect接受两个参数：</p><ul><li>setup：初始化的意思， 是一个函数</li><li>dependencies?：依赖，必须是一个数组</li></ul><p>主要是因为uSeEffect的执行时机决定了他的第一个参数会起名为setup</p><h3 id="执行时机" tabindex="-1">执行时机 <a class="header-anchor" href="#执行时机" aria-label="Permalink to &quot;执行时机&quot;">​</a></h3><p>useEffect的执行时机：</p><ol><li>当我们使用useEffect去注册了setup以后，React会在该组件每次挂载【挂载完毕】到页面中时都会执行对应的setup</li></ol><p>函数，但setup函数是异步执行的 =&gt; useLayoutEffect的时候会讲</p><ul><li>挂载：React将一个组件渲染到页面中的过程叫做挂载，渲染完毕叫做挂载完毕；</li><li>vue, react的类组件有onMounted, onComponentDidMount的概念，可以先简单把没有依赖的useEffect去直接对标这些生命周期函数</li></ul><ol start="2"><li>当依赖项发生变更的时候，useEffect会重新执行对应的setup函数</li></ol><h3 id="副作用清除" tabindex="-1">副作用清除 <a class="header-anchor" href="#副作用清除" aria-label="Permalink to &quot;副作用清除&quot;">​</a></h3><p>setup函数有一个返回值，这个返回值被称之为清理函数，清理函数会在组件卸载时被执行 beforeDestory</p><blockquote><p>DOM事件的绑定</p></blockquote><p>\`import { useEffect } from &quot;react&quot;;</p><p>export default function TestUseEffect(){ const handleKeyDown = (e) =&gt; { console.log(&quot;keydown is called&quot;) } useEffect(()=&gt;{ document.addEventListener(&#39;keydown&#39;, handleKeyDown) return () =&gt; { document.removeEventListener(&#39;keydown&#39;,handleKeyDown) } },[]) return ( <ul><li>1</li><li>2</li><li>3</li></ul> ) }\`</p><blockquote><p>计时器</p></blockquote><p>\`import { useEffect, useState } from &quot;react&quot;;</p><p>export default function TestUseEffect(){ const [tickTime, setTickTime] = useState(100) useEffect(()=&gt;{ let timer = setInterval(() =&gt; { setTickTime(pre=&gt;pre-1) console.log(&quot;Tick is working&quot;); },1000) return ()=&gt;{ clearInterval(timer) timer = null } },[]) return ( <h2>抢购剩余时间: {tickTime}s</h2> ) }\`</p><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ul><li>发送网络请求</li><li>获取真实DOM元素</li><li>管理依赖项（这个依赖项必须使用useState构建），当依赖项变化时，setup重新执行</li></ul><h2 id="自定义-hook" tabindex="-1">自定义 hook <a class="header-anchor" href="#自定义-hook" aria-label="Permalink to &quot;自定义 hook&quot;">​</a></h2><p>消除冗余代码 提高代码的可维护性 同时将复杂的逻辑进行内聚 减少出错的可能</p><h3 id="搭建后端服务器" tabindex="-1">搭建后端服务器 <a class="header-anchor" href="#搭建后端服务器" aria-label="Permalink to &quot;搭建后端服务器&quot;">​</a></h3><blockquote><p>server/src/index.js</p></blockquote><p>\`const Koa = require(&#39;koa&#39;)</p><p>const koaApp = new Koa()</p><p>const PORT = 8888</p><p>koaApp.listen(PORT,() =&gt; { console.log(<code>PORT is listening at \${PORT}</code>); })</p><p>function delay(duration=2000){ return new Promise((resolve,reject)=&gt;{ setTimeout(() =&gt; { resolve() },duration) }) }</p><p>koaApp.use(async (ctx) =&gt; { const {path} = ctx if (path===&#39;/student&#39;) { const data = require(&#39;./student.json&#39;) await delay(2000) ctx.response.body = data } })</p><p>// 在应用程序停止运行后，自动关闭端口 process.on(&#39;SIGINT&#39;, () =&gt; { server.close(() =&gt; { console.log(&#39;应用程序已经停止运行，关闭端口！&#39;); }); });\`</p><h3 id="处理跨域请求" tabindex="-1">处理跨域请求 <a class="header-anchor" href="#处理跨域请求" aria-label="Permalink to &quot;处理跨域请求&quot;">​</a></h3><p>保持git工作树clean，之后使用yarn反编译create-react-app脚手架的webpack配置</p><p><code>yarn eject</code></p><p>反编译之后，在config/webpackDevServer.config.js文件中，添加如下代码</p><pre><code>\`// \`proxy\` is run between \`before\` and \`after\` \`webpack-dev-server\` hooks
proxy: {
  &#39;/api&#39;: {
    target: &#39;http://localhost:8888&#39;,
    pathRewrite: {
      &#39;^/api&#39;:&#39;&#39;
    }
  }
},\`
</code></pre><h3 id="userequestloadingdispatch" tabindex="-1">useRequestLoadingDispatch <a class="header-anchor" href="#userequestloadingdispatch" aria-label="Permalink to &quot;useRequestLoadingDispatch&quot;">​</a></h3><blockquote><p>定义</p></blockquote><p>\`import { useState } from &quot;react&quot;;</p><p>export default function useRequestLoadingDispatch() { const [loading,setLoading] = useState(false) const excuteRequest = async (promiseFn) =&gt; { setLoading(true) await promiseFn() setLoading(false) }</p><p>return { loading, excuteRequest } }\`</p><blockquote><p>使用</p></blockquote><p>\`import { getStudentList } from &#39;../../request&#39;; import { useState,useEffect } from &#39;react&#39;; import StudentItem from &#39;./components/StudentItem&#39;; import useRequestLoadingDispatch from &#39;../../hooks/useRequestLoadingDispatcher&#39;;</p><p>export default function StudentList(){ const [list,setList] = useState([]) const {loading,excuteRequest} = useRequestLoadingDispatch()</p><p>const fetchData = async ()=&gt;{ excuteRequest(async ()=&gt;{ const res = await getStudentList() setList(res.data) }) }</p><p>useEffect(() =&gt; { fetchData() },[])</p><p>return ( <div> { loading ? <h2>加载ing</h2> : list.map(student=&gt;&lt;StudentItem {...student}/&gt;) } </div> ) }\`</p><h3 id="useforceupdate" tabindex="-1">useForceUpdate <a class="header-anchor" href="#useforceupdate" aria-label="Permalink to &quot;useForceUpdate&quot;">​</a></h3><blockquote><p>强制更新</p></blockquote><p>\`import { useState } from &quot;react&quot;;</p><p>export default function useForceUpdate() { const [_,setVal] = useState({}) const forceUpdate = ()=&gt;{ setVal({}) } return { _, forceUpdate } }\`</p><h3 id="usewindowscrollwatcher" tabindex="-1">useWindowScrollWatcher <a class="header-anchor" href="#usewindowscrollwatcher" aria-label="Permalink to &quot;useWindowScrollWatcher&quot;">​</a></h3><p>\`import { useEffect } from &quot;react&quot;;</p><p>export default function useWindowScrollWatcher(scrollCallback) { useEffect(() =&gt; { document.addEventListener(&#39;scroll&#39;,scrollCallback) return () =&gt; { document.removeEventListener(&#39;scroll&#39;,scrollCallback) } }) }\`</p>`,84),p=[o];function t(r,c,i,F,D,y){return a(),n("div",null,p)}const C=s(e,[["render",t]]);export{d as __pageData,C as default};
