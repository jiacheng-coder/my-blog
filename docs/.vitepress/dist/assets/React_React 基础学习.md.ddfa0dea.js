import{_ as s,o as a,c as n,U as l}from"./chunks/framework.a7041386.js";const b=JSON.parse('{"title":"React 基础学习","description":"","frontmatter":{"tag":["React"]},"headers":[],"relativePath":"React/React 基础学习.md","filePath":"React/React 基础学习.md","lastUpdated":1690701222000}'),e={name:"React/React 基础学习.md"},p=l(`<h1 id="react-基础学习" tabindex="-1">React 基础学习 <a class="header-anchor" href="#react-基础学习" aria-label="Permalink to &quot;React 基础学习&quot;">​</a></h1><blockquote><p>推荐阅读：<a href="https://juejin.cn/post/7118937685653192735" target="_blank" rel="noreferrer">https://juejin.cn/post/7118937685653192735</a></p></blockquote><h2 id="起步" tabindex="-1">起步 <a class="header-anchor" href="#起步" aria-label="Permalink to &quot;起步&quot;">​</a></h2><h3 id="本质" tabindex="-1">本质 <a class="header-anchor" href="#本质" aria-label="Permalink to &quot;本质&quot;">​</a></h3><blockquote><p>在React jsx文件中每一次对组件的使用<code>&lt;App /&gt;</code>都是在直接调用对应的组件函数</p></blockquote><ul><li><p>component state组件状态，实际上直接翻译过来不准确，因此应该理解为“组件数据”</p></li><li><p>页面渲染 === 组件执行 / 重新渲染 === 函数组件的重新执行</p></li><li><p>我们最终执行的代码是通过babel编译以后的代码</p><p><code>React. createElement(&quot;span&quot;,{},count)</code>---&gt;调用document上面的一些方法去改变真实dom的显示状态</p><p>count-&gt;0 如果我们想要页面里发生一点显示效果的变化，我们得让React.createElement这段代码重复执行</p></li><li><p>如果想尝试让函数组建重新渲染，只有两种方式</p><ul><li>组件状态发生变化，注意此处是指通过useState定义的状态</li><li>父组件重新渲染</li></ul></li></ul><h3 id="解决了什么问题" tabindex="-1">解决了什么问题 <a class="header-anchor" href="#解决了什么问题" aria-label="Permalink to &quot;解决了什么问题&quot;">​</a></h3><ul><li>组件的逻辑复用</li><li>解决了mixins混入的数据来源不清晰，HOC高阶组件的嵌套问题</li><li>让函数组件拥有了类组件的特性，例如组件内的状态、生命周期等</li></ul><h3 id="理解脚手架" tabindex="-1">理解脚手架 <a class="header-anchor" href="#理解脚手架" aria-label="Permalink to &quot;理解脚手架&quot;">​</a></h3><p>脚手架：在工程学里，脚手架提供了一系列预设，让施工者无需再考虑除了建造以外的其他外部问题，在编程学里，脚手架同样提供了一系列的预设，</p><p>让开发者无需再考虑除了自身业务代码以外的其他外部问题：</p><ol><li><p>我们要发生产环境，代码压缩，用webpack，脚手架：我直接给你集成webpack，不仅如此 我还帮你把webpack的这个配置写好了 你不用管</p></li><li><p>组件化，我该怎么划分我的文件夹？？图片该放哪 我的组件又该放哪 脚手架：你别管，我也处理好了 你只需要用我这个脚手架 我直接帮你把项</p></li></ol><p>目目录直接生成</p><ol start="3"><li>网络：跨域———＞浏览器他不会让你随便请求别的服务器的数据的，如果不是同域名 同协议同端口 浏览器会进行拦截 我们就要跨域，那这个时</li></ol><p>候我们就要去搭建临时的跨域服务器，脚手架：小意思辣 你别管 我来</p><ol start="4"><li>...</li></ol><h3 id="规范" tabindex="-1">规范 <a class="header-anchor" href="#规范" aria-label="Permalink to &quot;规范&quot;">​</a></h3><p>React对组件有一些要求：</p><ol><li><p>组件名必须大写</p></li><li><p>React组件必须要返回可以渲染的东西</p></li></ol><ul><li>null</li><li>React元素</li><li>组件</li><li>可以被迭代的对象【包括数组，set，map..】，只要一个对象具备迭代接口，那他就可以被渲染</li><li>状态 以及属性。</li></ul><h2 id="组件属性" tabindex="-1">组件属性 <a class="header-anchor" href="#组件属性" aria-label="Permalink to &quot;组件属性&quot;">​</a></h2><p>函数参数是让一个函数变得更加灵活的关键，同样，组件属性是让一个组件变得更加灵活的关键，组件属性和函数参数的原理大差不差，你给组件传递属性也就是意味着你在给对应的组件函数传递参数</p><p>但凡一个组件要重新渲染，都必须是满足以下两个条件之一：</p><ul><li>自身状态发生变化</li><li>父组件重新渲染，自身就会重新渲染✨</li></ul><p>React中的属性分为 <strong>标签属性</strong> 以及 <strong>组件属性</strong>：</p><ul><li>传递给组件的自然而然就是组件属性</li><li>传递给]SX的标签元素的属性就叫做标签属性【标签元素：在htmL中有明确的对标元素就叫做标签元素】，标签属性会被React自行处理对应到底层的事件或者属性 <ul><li>JSX最终都会被babel转换为React.createElement <ul><li>如果是标签元素，则会将对应的标签属性全部传递给React.createElement，然后React内部会自行处理</li><li>如果是组件元素，他的这些组件属性会被作为参数传递给对应组件函数</li></ul></li></ul></li></ul><h2 id="hooks分类" tabindex="-1">hooks分类 <a class="header-anchor" href="#hooks分类" aria-label="Permalink to &quot;hooks分类&quot;">​</a></h2><p><a href="https://km.sankuai.com/api/file/cdn/1728403390/43950220759?contentType=1&amp;isNewContent=false" target="_blank" rel="noreferrer">https://km.sankuai.com/api/file/cdn/1728403390/43950220759?contentType=1&amp;isNewContent=false</a></p><blockquote><p>自变量</p></blockquote><ul><li>useState</li><li>useReducer</li><li>useContext</li></ul><blockquote><p>因变量，含有依赖项</p></blockquote><ul><li>useEffect ==&gt; watchEffect</li><li>useMemo ==&gt; computed计算属性</li><li>useCallback ==&gt; 减少函数创建的次数</li></ul><blockquote><p>其他</p></blockquote><ul><li>useRef</li></ul><h2 id="usestate" tabindex="-1">useState <a class="header-anchor" href="#usestate" aria-label="Permalink to &quot;useState&quot;">​</a></h2><p>在我们使用usestate的时候 【我们为什么需要使用usestate来构建状态？因为使用usestate构建的状态会返回一个更新状态的函数，当调用这个</p><p>函数去修改状态时，React会通知组件去进行重新渲染】</p><ul><li><p>组件状态的更新是异步的【这意味着当更改状态的函数执行以后我们没有办法同步的马上得到他更新以后的值】</p><p>那我如何拿到最新的状态呢？useEffect / useLayoutEffect</p></li></ul><p>useState在调用的时候，可以给具体值，也可以给一个函数，这个函数的返回值被作为初始值，但是不推荐这种写法</p><p>为什么？✨</p><p>拿计数器Counter组件举例，</p><ul><li>Counter函数的重新执行意味着Counter函数内部的代码要全部执行一遍，包括useState()</li><li>但是useState内部对初始化操作有区分，只要不是在该函数组件内第一次调用useState，就不会进行初始化操作</li><li>不会进行初始化操作的意思是不会将你传递给useState的值去重新赋值，也就意味着如果你传递给useState的是一个函数，这个函数的计算只在初始化时有意义，后续函数计算的结果没有意义✨</li></ul><p>请看一段伪代码，便于理解useState的工作原理</p><p><code>function useState(initialState) { let state; if (isFirstIn) { state = initialState } const dispatch = (newState)=&gt;{ state = newState render() //重新渲染 } return [state, dispatch] }</code></p><h3 id="推荐写法" tabindex="-1">推荐写法 <a class="header-anchor" href="#推荐写法" aria-label="Permalink to &quot;推荐写法&quot;">​</a></h3><p>[state, setState] = useState(initialValue)</p><ul><li>initialValue写成具体值而不是一个函数</li><li>setState(prev=&gt;{return something})，setState函数的参数推荐写成函数的形式而不是具体值</li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li>组件状态的更新是异步的，意味着当更改状态的函数执行以后我们没有办法同步的马上得到他更新以后的值，那我如何拿到最新的状态呢？useEffect / uselLayoutEffect</li><li>usestate在调用的时候可以传递函数，也可以传递具体的值，如果传递的是函数，则会直接将函数的返回值作为初始化状态，但是虽然在初始化的时候他允许你传递函数，我们也尽量不要传递函数，因为初始化工作只会进行一次</li><li>usestate会返回一个数组，数组里面有两个成员 <ul><li>以初始化为值的变量</li><li>修改该变量的函數，这个函数的调用会<strong>造成函数组件的重新运行</strong><ul><li>调用该函数的时候可以直接传递一个值，也可以传递一个函数，如果你传递一个函数进去，则React会将上一次的状态传递给你，帮助你进行计算；如果你传递的是一个函数，React会将这个函数放到一个队列里等待执行，那也就是如果我们想每次都稳稳的拿到上一次的值，我们得写成一个函数</li><li>推荐写成函数的形式</li><li>状态的更新是批量进行的，而不是一个一个的进行，这是为了性能考虑，成为auto batching</li></ul></li></ul></li></ul><h2 id="useeffect" tabindex="-1">useEffect <a class="header-anchor" href="#useeffect" aria-label="Permalink to &quot;useEffect&quot;">​</a></h2><h3 id="函数副作用" tabindex="-1">函数副作用 <a class="header-anchor" href="#函数副作用" aria-label="Permalink to &quot;函数副作用&quot;">​</a></h3><p>副作用是相对于主作用来说的，一个函数除了主作用，其他的作用就是副作用。对于 React 组件来说，<strong>主作用就是根据数据（state/props）渲染 UI</strong>，除此之外都是副作用。</p><h3 id="常见副作用" tabindex="-1">常见副作用 <a class="header-anchor" href="#常见副作用" aria-label="Permalink to &quot;常见副作用&quot;">​</a></h3><ul><li>数据请求 ajax 发送手动修改 domlocalstorage 操作......useEffect 函数的作用就是为 react 函数组件提供副作用处理的！</li></ul><h3 id="案例1-useeffect-fn" tabindex="-1">案例1：useEffect(fn) <a class="header-anchor" href="#案例1-useeffect-fn" aria-label="Permalink to &quot;案例1：useEffect(fn)&quot;">​</a></h3><p>默认是全部属性的副作用都会调用该函数，很少使用</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useEffect</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 函数组件</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Sub</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setCount</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 例如：count 的主作用就是更换按钮中的内容，但是当需要用到它的副作用时，需要在 useEffect 函数中实现它副作用效果</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">useEffect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">副作用函数调用了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 副作业函数会每次数据变化都执行，默认是全部属性的副作用都会调用该函数，可以指定</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 例如：当它初始化或变化时设置为网页标题，这就是副作业</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">title</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 这是 count 的主作用</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setCount</span><span style="color:#A6ACCD;">(count </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">}&gt;{</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Sub</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#FFCB6B;">Sub</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">    )</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> App</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="案例2-useeffect-fn" tabindex="-1">案例2：useEffect(fn,[]) <a class="header-anchor" href="#案例2-useeffect-fn" aria-label="Permalink to &quot;案例2：useEffect(fn,[])&quot;">​</a></h3><p>只在组件首次渲染时执行一次，常用</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">useEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">title</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> [])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="案例3-useeffect-fn-value" tabindex="-1">案例3：useEffect(fn,[value,...]) <a class="header-anchor" href="#案例3-useeffect-fn-value" aria-label="Permalink to &quot;案例3：useEffect(fn,[value,...])&quot;">​</a></h3><p>只在首次渲染和指定的属性变动时执行，常用</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 函数组件</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Sub</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setCount</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setName</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dzm</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 指定 count/name 会有副作用回调，首次渲染也会回调</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">useEffect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">副作用函数调用了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">title</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 此时什么时候会执行副作用函数？初始化 + count/name被修改时都会执行</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 可以写多个副作用函数</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// useEffect(() =&gt; {</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//   console.log(&#39;count 副作用函数调用了&#39;)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// }, [count])</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// useEffect(() =&gt; {</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//   console.log(&#39;name 副作用函数调用了&#39;)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// }, [name])</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setCount</span><span style="color:#A6ACCD;">(count </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">}&gt;{</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setName</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">}&gt;{</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="清理副作用✨" tabindex="-1">清理副作用✨ <a class="header-anchor" href="#清理副作用✨" aria-label="Permalink to &quot;清理副作用✨&quot;">​</a></h3><p>使用场景：在组件被销毁时，如果有些副作用操作需要被清理，就可以使用这种方式（比如常见的 定时器）。</p><p>如果想要清理副作用，可以在副作用函数中的末尾 return 一个新的函数，在新的函数中编写清理副作用的逻辑，注意执行时机为：</p><ul><li>组件卸载时自动执行</li><li>组件更新时，下一个 useEffect 副作用函数执行之前自动执行</li></ul><p>\`import { useEffect, useState } from &quot;react&quot;</p><p>const App = () =&gt; { const [count, setCount] = useState(0) useEffect(() =&gt; { const timer = setInterval(() =&gt; { setCount(count + 1) }, 1000) return () =&gt; { // 用来清理副作用的事情 clearInterval(timer) } }, [count]) return ( <div>{count}</div> ) }</p><p>export default App\`</p>`,70),o=[p];function t(c,r,i,y,F,u){return a(),n("div",null,o)}const C=s(e,[["render",t]]);export{b as __pageData,C as default};
