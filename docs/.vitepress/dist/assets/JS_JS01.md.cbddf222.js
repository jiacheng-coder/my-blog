import{_ as s,o as a,c as l,U as n}from"./chunks/framework.876add27.js";const A=JSON.parse('{"title":"JavaScript","description":"","frontmatter":{"tag":["JS"]},"headers":[],"relativePath":"JS/JS01.md","filePath":"JS/JS01.md","lastUpdated":1689602218000}'),o={name:"JS/JS01.md"},p=n(`<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h1><h2 id="es6和es5的区别" tabindex="-1">ES6和ES5的区别 <a class="header-anchor" href="#es6和es5的区别" aria-label="Permalink to &quot;ES6和ES5的区别&quot;">​</a></h2><ul><li><p>箭头函数</p></li><li><p>let, const创建块级作用域,不会像var一样进行变量提升(先使用,后创建)</p></li><li><p>模板字符串和字符串拼接的优劣</p></li><li><p>类定义与继承</p><p>ES6 引入了对类(<code>class</code>关键字)、构造函数(<code>constructor</code>关键字)和 <code>extend</code> 关键字(用于继承)的语言支持</p></li><li><p><code>for...of</code> 语句用于可迭代对象的遍历</p></li><li><p>展开操作符</p></li><li><p>Promise, async和await</p></li><li><p>模块导出和导入</p><ul><li>默认导出,默认导入</li><li>按需导出,按需导入</li></ul></li><li><p>解构赋值: 解构赋值的优点是可以让代码更简洁、清晰和易读，也可以<strong>避免一些临时变量的声明</strong></p><ul><li><p>交换两个变量的值</p></li><li><p>获取函数返回的多个值</p></li><li><p>提取JSON数据</p></li><li><p>函数参数定义</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 可以用解构赋值为函数参数定义默认值和别名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">([</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 返回1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Anonymous</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Unknown</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Name:</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">,Age:</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Tom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 输出 Name:Tom,Age:Unknown</span></span></code></pre></div></li></ul></li></ul><h2 id="回调函数" tabindex="-1">回调函数 <a class="header-anchor" href="#回调函数" aria-label="Permalink to &quot;回调函数&quot;">​</a></h2><p>js中回调函数的定义和作用如下：</p><ul><li>回调函数是一种函数表达式，它<strong>作为一个参数传递给另一个函数</strong>，在合适的时机被调用</li><li>回调函数可以<strong>实现异步操作</strong>，即在主线程执行完同步代码后，再执行任务队列中的回调函数</li><li>回调函数可以<strong>实现高阶函数</strong>，即<strong>一个函数可以接收另一个函数作为参数或返回值</strong></li></ul><p>例如，数组的 map 方法就是一个高阶函数，它接收一个回调函数作为参数，并对数组的每个元素执行该回调函数。代码如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> newArr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(newArr)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [2, 4, 6]</span></span></code></pre></div><p>这是一个异步操作的回调函数例子：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 定义一个模拟异步请求的函数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">request</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">callback</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 使用 setTimeout 模拟网络延迟</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 使用 Math.random 模拟请求成功或失败</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">success</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">success</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 如果成功，调用回调函数并传入响应数据</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">callback</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Response from </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 如果失败，调用回调函数并传入错误信息</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">callback</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Error: request failed for </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 调用 request 函数，并传入一个匿名回调函数作为参数</span></span>
<span class="line"><span style="color:#82AAFF;">request</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://example.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果有错误，打印错误信息</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果没有错误，打印响应数据</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="异步编程" tabindex="-1">异步编程 <a class="header-anchor" href="#异步编程" aria-label="Permalink to &quot;异步编程&quot;">​</a></h2><p>异步编程是一种让程序并行运行的手段，它可以让程序中的一个工作单元与主应用程序线程分开独立运行，并且在工作单元运行结束后，会通知主应用程序线程它的运行结果或者失败原因。异步编程可以提高程序的性能和用户体验，<strong>避免长时间的阻塞操作影响其他任务的执行</strong></p><p>JavaScript中实现异步编程的方法有多种，常见的有以下几种</p><ul><li>回调函数：这是异步编程最基本的方法，就是将一个函数作为参数传递给另一个函数，在异步操作完成后调用该函数。</li><li>事件监听：这是利用事件驱动模式，通过绑定事件处理器来响应异步操作的结果。</li><li>发布/订阅：这是一种消息通信模式，通过一个中介对象来管理订阅者和发布者之间的消息传递，实现解耦和异步。</li><li>Promise对象：这是一种封装了异步操作状态和结果的对象，可以通过链式调用then方法来处理成功或失败的回调函数，避免了回调地狱</li><li>async/await：这是一种基于Promise和Generator的语法糖，可以让异步代码看起来像同步代码一样简洁清晰</li></ul><h2 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;箭头函数&quot;">​</a></h2><p>为啥大多数情况都使用<strong>箭头函数</strong>？</p><ul><li><strong>作用域安全性</strong>:当箭头函数被一致使用时，所有东西都保证使用与根对象相同的<code>thisObject</code>。如果一个标准函数回调与一堆箭头函数混合在一起，那么作用域就有可能变得混乱。</li><li><strong>紧凑性</strong>:箭头函数更容易读写。</li><li>清晰度:使用箭头函数可明确知道当前 <code>this</code> 指向。</li></ul><blockquote><p>箭头函数和普通函数的区别和使用场景</p></blockquote><ul><li>箭头函数是一种简洁的函数表达式，使用 =&gt; 符号定义，普通函数使用 function 关键字定义</li><li>箭头函数不能作为构造函数使用，也就不能使用 new 关键字</li><li>箭头函数没有自己的 this、arguments、super 和 new.target，它们依赖于外部非箭头函数的值</li><li>箭头函数不能用作生成器（generator），也就不能使用 yield 关键字</li></ul><p>箭头函数适合用于不需要 this、arguments、super 和 new.target 的情况，例如回调函数、数组方法等。普通函数适合用于需要这些值的情况，例如构造函数、对象方法等。</p><h2 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-label="Permalink to &quot;Symbol&quot;">​</a></h2><p><code>Symbol</code> 是一种新的、特殊的对象，可以用作对象中惟一的属性名。使用 <code>Symbol</code> 替换<code>string</code> 可以<strong>避免不同的模块属性的冲突</strong>。还可以将<code>Symbol</code>设置为私有，以便尚无直接访问<code>Symbol</code>权限的任何人都不能访问它们的属性。</p><p><code>Symbol</code> 是JS新的基本数据类型。与<code>number</code>、<code>string</code>和<code>boolean</code> 原始类型一样，<code>Symbol</code> 也有一个用于创建它们的函数。与其他原始类型不同，<code>Symbol</code>没有字面量语法。创建它们的唯一方法是使用以下方法中的<code>Symbol</code>构造函数</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let symbol = Symbol();</span></span></code></pre></div><h2 id="itfe" tabindex="-1">ITFE <a class="header-anchor" href="#itfe" aria-label="Permalink to &quot;ITFE&quot;">​</a></h2><p><code>IIFE</code>是一个立即调用的函数表达式，它在创建后立即执行, 使用此模式来避免污染全局命名空间，因为在<code>IIFE</code>中使用的所有变量(与任何其他普通函数一样)在其作用域之外都是不可见的。</p><h2 id="模板字符串" tabindex="-1">模板字符串 <a class="header-anchor" href="#模板字符串" aria-label="Permalink to &quot;模板字符串&quot;">​</a></h2><ul><li>模板字符串使用反引号 (\`) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（\${expression}）的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来¹。</li><li>字符串拼接使用加号 (+) 或者 concat 方法来将多个字符串或变量连接起来，形成一个新的字符串。</li><li>模板字符串相比于字符串拼接，有以下优点： <ul><li>可以直接在占位符中插入表达式，而不需要使用加号或者 concat 方法。</li><li>可以保留换行和空格，而不需要使用转义字符 (\\n) 或者连接多个字符串。</li><li>可以支持嵌套模板，实现更复杂的逻辑。</li><li>可以自定义标签函数，对模板进行处理或过滤</li></ul></li><li>字符串拼接相比于模板字符串，有以下优点： <ul><li>兼容性更好，可以在所有浏览器中运行，而模板字符串是 ES6 的新特性，在一些旧版本的浏览器中可能不支持</li><li>性能稍微好一些，在一些测试中发现模板字符串比字符串拼接慢一点</li></ul></li></ul><h2 id="set、map、weakset、weakmap" tabindex="-1">Set、Map、WeakSet、WeakMap <a class="header-anchor" href="#set、map、weakset、weakmap" aria-label="Permalink to &quot;Set、Map、WeakSet、WeakMap&quot;">​</a></h2><blockquote><p>Set用于数组去重，Map用于数据储存</p><p>Set：　 （1）成员不能重复 （2）只有键值没有键名，类似数组 （3）可以遍历，方法有add, delete,has Map: （1）本质上是健值对的集合，类似集合, 但Map的键可以是非string, 这是它与对象最大的不同 （2）可以遍历，可以跟各种数据格式转换</p></blockquote><p>Set去重:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">43</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">23</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">43</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">68</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> _arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">...new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">(arr)]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(_arr)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//[12, 43, 23, 68]</span></span></code></pre></div><h2 id="promise🔥" tabindex="-1">Promise🔥 <a class="header-anchor" href="#promise🔥" aria-label="Permalink to &quot;Promise🔥&quot;">​</a></h2><p>为了解决回调地狱的问题, 例如wx.request链式调用,代码层级深,不易于维护</p><p>使用Promise可以使代码结构更加清晰</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> promise </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h3 id="有三个状态" tabindex="-1">有三个状态： <a class="header-anchor" href="#有三个状态" aria-label="Permalink to &quot;有三个状态：&quot;">​</a></h3><p>pending、fulfilled、reject</p><h3 id="有三个回调" tabindex="-1">有三个回调: <a class="header-anchor" href="#有三个回调" aria-label="Permalink to &quot;有三个回调:&quot;">​</a></h3><p>fulfilled-&gt;then</p><p>reject-&gt;catch</p><p>finally: 在fulfilled/reject之后执行, 可以在其中调用wx.stopLoading</p><h3 id="reject和catch区别" tabindex="-1">reject和catch区别 <a class="header-anchor" href="#reject和catch区别" aria-label="Permalink to &quot;reject和catch区别&quot;">​</a></h3><p>reject 是用来抛出异常，catch 是用来处理异常 reject 是 Promise 的方法，而 catch 是 Promise 实例的方法 reject后的东西，一定会进入then中的第二个回调，如果then中没有写第二个回调，则进入catch</p><h2 id="async-await以及对generator的优势" tabindex="-1">async/await以及对Generator的优势 <a class="header-anchor" href="#async-await以及对generator的优势" aria-label="Permalink to &quot;async/await以及对Generator的优势&quot;">​</a></h2><blockquote><p>async await 是用来解决异步的，async函数是Generator函数的语法糖 使用关键字async来表示，在函数内部使用 await 来表示异步 async函数返回一个 Promise 对象，可以使用then方法添加回调函数 当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句 <strong>async较Generator的优势：</strong> （1）内置执行器。Generator 函数的执行必须依靠执行器，而 Aysnc 函数自带执行器，调用方式跟普通函数的调用一样 （2）更好的语义。async 和 await 相较于 * 和 yield 更加语义化　　 （3）更广的适用性。yield命令后面只能是 Thunk 函数或 Promise对象，async函数的await后面可以是Promise也可以是原始类型的值 （4）返回值是 Promise。async 函数返回的是 Promise 对象，比Generator函数返回的Iterator对象方便，可以直接使用 then() 方法进行调用</p></blockquote><h2 id="foreach、for-in、for-of区别" tabindex="-1">forEach、for in、for of区别 <a class="header-anchor" href="#foreach、for-in、for-of区别" aria-label="Permalink to &quot;forEach、for in、for of区别&quot;">​</a></h2><blockquote><p>forEach更多的用来遍历数组 for in 一般常用来遍历对象或json for of数组对象都可以遍历，遍历对象需要通过和Object.keys() for in循环出的是key，for of循环出的是value</p></blockquote><p>js里forEach、for in、for of三者的区别是：</p><ul><li>forEach是数组的一个方法，它可以遍历数组的每个元素，并且可以访问元素的值和索引</li><li>for in是一个语句，它可以遍历一个对象的可枚举的字符串属性</li><li>for of也是一个语句，它可以遍历一个可迭代对象定义的值</li></ul><h3 id="foreach的示例" tabindex="-1">forEach的示例 <a class="header-anchor" href="#foreach的示例" aria-label="Permalink to &quot;forEach的示例&quot;">​</a></h3><ul><li>基本用法：forEach可以接受一个回调函数作为参数，这个回调函数会在数组的每个元素上执行。例如：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">v</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">v</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 输出：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// b</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// c</span></span></code></pre></div><ul><li>修改数组：一般来说，不建议使用forEach来修改数组。如果需要修改数组，可以使用map或filter方法。例如：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> numbers </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">numbers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">v</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">numbers</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">v</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(numbers)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 输出：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [2, 4, 6]</span></span></code></pre></div><ul><li>稀疏数组：如果数组中有空元素，forEach会跳过它们。例如：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arraySparse </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* empty */</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> numCallbackRuns </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">arraySparse</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">element</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">element</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">numCallbackRuns</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> numCallbackRuns </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 输出：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// { element: 1 }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// { element: 3 }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// { element: 7 }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// { numCallbackRuns: 3 }</span></span></code></pre></div><h3 id="for-in和for-of的示例" tabindex="-1">for in和for of的示例 <a class="header-anchor" href="#for-in和for-of的示例" aria-label="Permalink to &quot;for in和for of的示例&quot;">​</a></h3><ul><li>for in可以遍历一个对象的所有可枚举的字符串属性，返回的是键而不是值; 常用于对象的遍历, 例如：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Alice</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">25</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">city</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">New York</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> person) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">person</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 输出：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// name: Alice</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// age: 25</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// city: New York</span></span></code></pre></div><ul><li><p>for of可以遍历一个可迭代对象定义的值，并且可以访问元素的值。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fruits </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">apple</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">orange</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cherry</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> fruit </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> fruits) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fruit</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 输出：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// apple</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// orange</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// cherry</span></span></code></pre></div></li><li><p>判断一个对象是否可迭代有两种方法</p><ul><li><p>使用for of遍历对象,如果可以用for of遍历, 则对象可迭代</p></li><li><p>检查对象是否有@iterator方法，这个方法是一个特殊的符号属性，用来返回一个迭代器对象, 例如</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> arr[Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">iterator])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// function</span></span></code></pre></div></li></ul></li></ul><h3 id="for-in和for-of的优缺点" tabindex="-1">for in和for of的优缺点 <a class="header-anchor" href="#for-in和for-of的优缺点" aria-label="Permalink to &quot;for in和for of的优缺点&quot;">​</a></h3><ul><li>for in的优点是可以遍历对象的所有可枚举的字符串属性，包括原型链上的属性。这可以方便地获取对象的结构和信息。</li><li>for in的缺点是它不能直接遍历数组或类数组对象，因为它会返回索引而不是值。另外，它可能会遍历到一些不想要的属性，比如继承自Object.prototype的属性。</li><li>for of的优点是可以遍历任何可迭代对象定义的值，包括数组、字符串、Map、Set等。这可以方便地获取元素的值而不用关心索引或键。</li><li>for of的缺点是它不能直接遍历普通对象，因为普通对象不是可迭代对象。另外，它可能会跳过一些空元素或未定义的值。</li></ul><h3 id="遍历数组时使用foreach还是forof" tabindex="-1">遍历数组时使用foreach还是forof <a class="header-anchor" href="#遍历数组时使用foreach还是forof" aria-label="Permalink to &quot;遍历数组时使用foreach还是forof&quot;">​</a></h3><p>这取决于你的需求和喜好</p><p><strong>foreach是Array类型的一个方法</strong>，它可以对数组中的每一项执行一个回调函数，但是它不会改变原数组，也不能使用break或return中断循环</p><p><strong>forof是ES6引入的一种新的循环语法</strong>，它可以遍历任何<strong>可迭代的对象</strong>，包括数组、字符串、Map、Set等，它比for循环更简洁，也没有forin那么多奇怪的特例</p><p>如果你只需要访问数组中的元素值，而不需要索引或其他属性，那么forof可能是最好的选择。如果你需要对数组进行链式操作或者异步处理，那么foreach可能更合适。</p><h2 id="es6的导入导出" tabindex="-1">ES6的导入导出 <a class="header-anchor" href="#es6的导入导出" aria-label="Permalink to &quot;ES6的导入导出&quot;">​</a></h2><blockquote><p>导入通过import关键字</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 按需导入</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">sum</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./example.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">sum</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">multiply</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">time</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./exportExample.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 一整个模块全部导入,使用as重命名</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> example </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./exportExample.js</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><blockquote><p>导出通过export关键字</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//可以将export放在任何变量,函数或类声明的前面</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> firstName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Michael</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> lastName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Jackson</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> year </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1958</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//也可以使用大括号指定所要输出的一组变量</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> firstName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Michael</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> lastName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Jackson</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> year </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1958</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">firstName</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lastName</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">year</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//使用export default时，对应的import语句不需要使用大括号</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> bosh </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">crs</span><span style="color:#89DDFF;">(){}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> bosh</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> crc </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">crc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//不使用export default时，对应的import语句需要使用大括号</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> bosh </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">crs</span><span style="color:#89DDFF;">(){}</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> bosh</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">crc</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">crc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="sessionstorage-localstorage-cookie-区别" tabindex="-1">SessionStorage, LocalStorage，Cookie 区别 <a class="header-anchor" href="#sessionstorage-localstorage-cookie-区别" aria-label="Permalink to &quot;SessionStorage, LocalStorage，Cookie 区别&quot;">​</a></h2><p>前端SessionStorage，LocalStorage，Cookie 是三种不同的<strong>本地存储</strong>方式</p><h3 id="区别" tabindex="-1">区别： <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别：&quot;">​</a></h3><ul><li>存储大小：Cookie 一般不超过4K，而 SessionStorage 和 LocalStorage 可以存储5Mb或更多²⁴。</li><li>数据有效期：Cookie 由服务器生成，可以设置失效时间；如果没有设置时间，关闭浏览器 Cookie 失效；如果设置了时间，Cookie 就会存储在硬盘中，过期失效⁴。SessionStorage 只在当前会话有效，关闭浏览器或标签页就会清除。LocalStorage 持久化存储，除非手动删除。</li><li>数据共享：Cookie 在同源的所有页面中都可以访问²。SessionStorage 只在同一个窗口（或标签页）中共享²。LocalStorage 在同源的所有窗口中都可以访问²。</li><li>数据发送：Cookie 会参与服务端的通信，在 HTTP 请求的头部中携带¹²。SessionStorage 和 LocalStorage 是单纯的前端存储，不参与与服务端的通信¹²。</li><li>设置方式：Cookie 可以由客户端（ document.cookie ）和服务端（ Set-Cookie ）都可以设置¹。SessionStorage 和 LocalStorage 只有客户端才能设置¹</li></ul><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><p>本地存储的应用场景主要取决于数据的有效期、共享范围和发送需求。一般来说：</p><ul><li>Cookie 适合用于标记用户和跟踪用户行为，例如一些关键密匙验证等²。</li><li>LocalStorage 适合用于长期保存在本地的数据，例如令牌、用户偏好等²。</li><li>SessionStorage 适合用于敏感账号的一次性登录，或者临时保存一些表单数据等²。</li></ul><p>微信小程序里的 storage 是属于 LocalStorage 的一种存储方式，它也是使用 key-value 的形式存储数据，但是它有以下几个特点：</p><ul><li>它是异步的，不会阻塞主线程。</li><li>它可以设置过期时间，超过时间后会自动清除。</li><li>它可以在同一个微信用户、同一个小程序下共享数据。</li></ul><h3 id="本地存储的安全性问题" tabindex="-1">本地存储的安全性问题 <a class="header-anchor" href="#本地存储的安全性问题" aria-label="Permalink to &quot;本地存储的安全性问题&quot;">​</a></h3><ul><li>本地存储容易受到 XSS 攻击，导致数据被窃取或篡改¹。</li><li>本地存储无法在服务器端控制或更新，需要用户手动删除或修改¹。</li><li>本地存储可能会因为用户清除浏览器缓存而丢失数据¹。</li><li>本地存储可能会因为设备被移除或转移而泄露数据²。</li></ul><blockquote><p>为了提高本地存储的安全性，可以采取以下一些措施：</p></blockquote><ul><li>使用 HTTPS 协议和加密算法来保护数据传输和存储。</li><li>使用服务器端验证和授权机制来限制对数据的访问。</li><li>使用定期备份和恢复机制来防止数据丢失。</li><li>使用物理锁或密码锁来保护设备不被盗用或转移。</li></ul><h2 id="typeof-和-instance" tabindex="-1">typeof 和 instance <a class="header-anchor" href="#typeof-和-instance" aria-label="Permalink to &quot;typeof 和 instance&quot;">​</a></h2><ul><li>作用 <ul><li>检测数据类型</li><li>检测对象之间的关联性</li></ul></li><li>返回 <ul><li>小写字母字符串</li><li>布尔值</li></ul></li><li>操作数 <ul><li>简单数据类型、</li><li>左边必须是引用类型，函数或者对象，右边必须是函数</li></ul></li><li>操作数数量 <ul><li>1个</li><li>2个</li></ul></li></ul><h2 id="null和undefined" tabindex="-1">null和undefined <a class="header-anchor" href="#null和undefined" aria-label="Permalink to &quot;null和undefined&quot;">​</a></h2><ul><li>null是主动使用，undefined是被动的备选手段</li><li>判断null和undefined时，应永远使用严格判断（===）</li><li>js中“没有传”、“没有给”和undefined基本等价；而null是有值的——例如：默认参数</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// null可以理解为空指针，和数字在一起时会隐式转换为0，undefined本质是个特殊对象，是js的特有的机制</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// null需要自己主动赋值，undefined是js运行机制自动返回的基本数据类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 只是个历史遗留问题而已，不足以说明null的本质</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// null和数字进行加减，大小比较的时候相当于0</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">34</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">34</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 34</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">34</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 0&lt;34 true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ==比较的时候，除了undefined之外，和null比较返回false</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span></code></pre></div><h3 id="使用上" tabindex="-1">使用上 <a class="header-anchor" href="#使用上" aria-label="Permalink to &quot;使用上&quot;">​</a></h3><p>默认参数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//age参数有默认值——也就是说，不传就是18</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">blue</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//传个undefined跟没传一样，系统认为“没有”和undefined等价</span></span>
<span class="line"><span style="color:#82AAFF;">blue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//18</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//传null就是有了，不会触发默认值</span></span>
<span class="line"><span style="color:#82AAFF;">blue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//null</span></span></code></pre></div><p>解构赋值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]=</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">undefined,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//undefined就是没给——触发默认值</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//null是给了，但是空——不触发默认值</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(b)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//null</span></span></code></pre></div>`,96),e=[p];function t(c,r,y,D,i,F){return a(),l("div",null,e)}const f=s(o,[["render",t]]);export{A as __pageData,f as default};
