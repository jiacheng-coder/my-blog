import{_ as e,o as t,c as n,U as a}from"./chunks/framework.a7041386.js";const m=JSON.parse('{"title":"类型系统","description":"","frontmatter":{"tag":["TS"]},"headers":[],"relativePath":"TS/类型系统.md","filePath":"TS/类型系统.md","lastUpdated":1690701222000}'),o={name:"TS/类型系统.md"},r=a('<h1 id="类型系统" tabindex="-1">类型系统 <a class="header-anchor" href="#类型系统" aria-label="Permalink to &quot;类型系统&quot;">​</a></h1><p>1.类型系统</p><p>核心：never 字面量类型 原始类型 any/unknown （赋值时只能是层级低的赋值给层级高的）</p><p>如何理解呢？</p><p>通过人往高处走这句俗语来理解，层级高的赋值给层级低的，就相当于水往低处流，这是不符合ts的规范的</p><p>层级低的赋值给层级高的，就是人往高处走，是符合ts的规范的</p><p>`// never 字面量类型 原始类型 any/unknown （赋值时只能是层级低的赋值给层级高的）</p><p>let t1: boolean let bool1:true = true // t1 = bool1 bool1 = t1 // 原始类型，赋值给字面量类型 不可以</p><p>let str1:&quot;132&quot; = &#39;132&#39; // 字面量类型 let str:string = &#39;bart&#39; str1 = str`</p><h2 id="结构化类型-vs-标称类型-nominal" tabindex="-1">结构化类型 VS 标称类型（nominal） <a class="header-anchor" href="#结构化类型-vs-标称类型-nominal" aria-label="Permalink to &quot;结构化类型 VS 标称类型（nominal）&quot;">​</a></h2><p>ts是基于类型的结构而不是类型的名称，进行类型的检查，因此会带来一些问题</p><p>开发中需要增添额外代码，来实现 nominal 标称类型系统，允许基于类型的名称而不是其结构进行类型检查</p><p>`// 有一种特殊情况 // export type CNY = Nonimal小于number, &#39;CNY&#39;&gt; // export type USD = Nonimal小于number, &#39;USD&#39;&gt; // const addCNY = (source:CNY,target:CNY) =&gt; { // return source+target // } // const CNYCount = 100 as CNY // const USDCount = 100 as USD // console.log(addCNY(CNYCount,CNYCount)) // console.log(addCNY(CNYCount,USDCount)) // 此处会打印输出200，但显然这种情况是不合理的，不能直接把USD和CNY相加</p><p>// 使用structre来模拟nonimal可以解决这种问题 export declare class TaggedProtector小于Tag extends string&gt; { protected __tag: Tag } export type Nonimal小于T,Tag extends string&gt; = T &amp; TaggedProtector小于Tag&gt; // 交叉类型 // 用于在 TypeScript 中创建一个名义类型系统，允许基于类型的名称而不是其结构进行类型检查。</p><p>export type CNY = Nonimal小于number, &#39;CNY&#39;&gt; export type USD = Nonimal小于number, &#39;USD&#39;&gt; const addCNY = (source:CNY,target:CNY) =&gt; { return source+target } const CNYCount = 100 as CNY const USDCount = 100 as USD console.log(addCNY(CNYCount,CNYCount)) console.log(addCNY(CNYCount,USDCount))`</p><h2 id="any-unknown-never" tabindex="-1">any,unknown,never <a class="header-anchor" href="#any-unknown-never" aria-label="Permalink to &quot;any,unknown,never&quot;">​</a></h2><h3 id="any-vs-unknown" tabindex="-1">any vs unknown <a class="header-anchor" href="#any-vs-unknown" aria-label="Permalink to &quot;any vs unknown&quot;">​</a></h3><p>any &gt;&gt;&gt; 具有传染性</p><p>unknown &gt;&gt;&gt; 类型安全</p><p>在js-&gt;ts重构时，推荐全部使用unknown，通过增添开发者的心智负担确保类型安全</p><h3 id="never" tabindex="-1">never <a class="header-anchor" href="#never" aria-label="Permalink to &quot;never&quot;">​</a></h3><p>never 小于 字面量类型 小于 原始类型 小于 any/unknown</p><p>也就是说，允许下层对上层进行赋值，例如将原始类型赋值给any/unknown，而不允许上层对下层进行赋值，例如将原始类型赋值给never类型</p><h3 id="never的妙用" tabindex="-1">never的妙用 <a class="header-anchor" href="#never的妙用" aria-label="Permalink to &quot;never的妙用&quot;">​</a></h3><p>在开发中，常常会遇到需要对不同数据类型的变量，做出不同的处理这种情况；此时，可以利用never处于类型系统底层的特性，在判断的结尾（也就是else处），试图将变量赋值给never类型，如果之前已经对变量的所有类型都做了处理，判断就不会走到else处，也就不会报错，反之就会报错。</p><p>通过这种特性，可以增强代码的规范性，通过增添开发者的心智负担保证了系统的稳定性。</p><h2 id="理解extends链" tabindex="-1">理解extends链 <a class="header-anchor" href="#理解extends链" aria-label="Permalink to &quot;理解extends链&quot;">​</a></h2><p>`// extends意味着什么，底层类型逐级extends上层类型，进而形成链条</p><p>// 类型系统的层级关系：构造一条extends链</p><p>// 从层级关系看类型断言的具体原理 class Base { name!: string } class DerivedBar extends Base { bar!: string } class DerivedBaz extends Base { baz!: string }</p><p>// 父类 &gt;&gt;&gt; 子类的类型断言 类型系统向下转型 const bar = new Base() as DerivedBar bar.name = &#39;23&#39; bar.bar = &#39;45&#39;</p><p>// 子类 &gt;&gt;&gt; 父类 // as 只用于转换存在子类型关系的两个类型 // extends通过结构化类型系统判断得到的兼容关系 const b = new DerivedBaz() as DerivedBar const b = new DerivedBaz() as Base as DerivedBar // 先向上转换，再向下转型</p><p>// 此外，还有一些其他类型系统知识，与类型编程相关性小，但同样重要 // - 协变和逆变 // - 类型控制流分析 // - 上下文类型`</p><h2 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h2><p>在Typescript中，基本数据类型有以下几种：</p><ol><li><strong>布尔值（Boolean）</strong>：布尔值表示真或假，只有两个值：true和false。</li><li><strong>数字（Number）</strong>：数字包括整数和浮点数，例如：10，10.5等。</li><li><strong>字符串（String）</strong>：字符串表示文本数据，可以使用单引号、双引号或反引号来表示。</li><li><strong>数组（Array）</strong>：数组表示一组同类型的数据集合，可以使用[]或Array小于elementType&gt;来定义。</li><li><strong>元组（Tuple）</strong>：元组表示已知元素数量和类型的数组，例如：[string, number]。</li><li><strong>枚举（Enum）</strong>：枚举表示具有命名的常量集合，例如：enum Color {Red, Green, Blue}。</li><li><strong>任意值（Any）</strong>：任意值表示可以被赋值为任意类型的数据，例如：let a: any = &#39;hello&#39;。</li><li><strong>空值（Void）</strong>：空值表示没有任何返回值的函数，例如：function test(): void {console.log(&#39;hello&#39;) }。</li><li><strong>Null和Undefined</strong>：Null和Undefined表示没有值的数据类型，它们是所有类型的子类型。</li></ol><h2 id="交叉类型" tabindex="-1">交叉类型 <a class="header-anchor" href="#交叉类型" aria-label="Permalink to &quot;交叉类型&quot;">​</a></h2><p>交叉类型和联合类型实际上就是指类型操作符。</p><p>交叉类型可以看作是将多个类型合并为一个类型的操作。使用“&amp;”符号来表示交叉类型。例如：</p><p>`type Person = { name: string; age: number; };</p><p>type Employee = { company: string; workId: string; };</p><p>type PersonEmployee = Person &amp; Employee;`</p><p>在上面的例子中，定义了两个类型：Person和Employee。然后使用“&amp;”符号将它们合并为一个新的类型：PersonEmployee。这个新的类型同时具有Person和Employee类型的所有属性。</p><p>交叉类型的使用场景包括：</p><ul><li>合并多个对象的属性⭐️</li><li>合并多个函数的参数和返回值</li></ul><h2 id="联合类型" tabindex="-1">联合类型 <a class="header-anchor" href="#联合类型" aria-label="Permalink to &quot;联合类型&quot;">​</a></h2><p>联合类型可以看作是将多个类型中的一个类型赋值给一个变量的操作。使用“|”符号来表示联合类型。例如：</p><p>`type Status = &quot;success&quot; | &quot;error&quot; | &quot;loading&quot;;</p><p>function getStatusMessage(status: Status) { switch (status) { case &quot;success&quot;: return &quot;Operation successful&quot;; case &quot;error&quot;: return &quot;Operation failed&quot;; case &quot;loading&quot;: return &quot;Operation in progress&quot;; } }`</p><p>在上面的例子中，我们定义了一个Status类型，它只能取“success”、“error”或“loading”这三个值中的一个。然后我们定义了一个函数getStatusMessage，它接受一个Status类型的参数，并根据参数的值返回不同的字符串。</p><p>联合类型的使用场景包括：</p><ul><li>定义一个变量可以是多个类型中的一种</li><li>定义一个函数可以接受多个类型中的一种作为参数⭐️</li></ul><h2 id="泛型" tabindex="-1">泛型 <a class="header-anchor" href="#泛型" aria-label="Permalink to &quot;泛型&quot;">​</a></h2><p>本质：接受类型作为参数，并且返回一个类型</p><p>常用的泛型工具类基本上都是这种实现</p><p>为什么要有泛型？</p><p>泛型的本质：类型参数化，让我们可以通过参数来控制类型，让代码具有更强的可拓展性。</p><p>具体体现有泛型函数、泛型类以及泛型约束</p><h2 id="常用泛型工具类" tabindex="-1">常用泛型工具类 <a class="header-anchor" href="#常用泛型工具类" aria-label="Permalink to &quot;常用泛型工具类&quot;">​</a></h2><p>`// 1.Partial：将传入的属性变为可选项 interface IPeople { title: string; name: string; }</p><p>type MyPartial小于T&gt; = { [P in keyof T]?:T[P] }</p><p>const people: MyPartial小于IPeople&gt; = { title: &#39;Delete inactive users&#39; };</p><p>// 2.Readonly interface Person { name: string; age: number; }</p><p>type MyReadonly小于T&gt; = { readonly [P in keyof T]: T[P] }</p><p>const p: MyReadonly小于Person&gt; = { name: &#39;张三&#39;, age: 22 }</p><p>// p.name = &#39;李四&#39;; // 无法分配到 &quot;name&quot; ，因为它是只读属性</p><p>// 3.Required interface ICar { weight?:number, height?:number } type MyRequired小于T&gt; = { [P in keyof T]-?:T[P] } const car:Required小于ICar&gt; = { weight: 30, height: 20 }</p><p>// 4.Pick interface IPerson { name: string; age: number; salary: number }</p><p>type MyPick小于T,K extends keyof T&gt; = { // 使用extends进行泛型约束，保证第二个参数（联合类型）肯定包含在T的keys里 [P in K]:T[P] // 通过映射对象类型，约束每一个属性成员 }</p><p>type TP = MyPick小于IPerson, &#39;name&#39;|&#39;salary&#39;&gt;;</p><p>const tp: TP = { // age: 22, // 对象文字可以只指定已知属性，并且“age”不在类型“TP”中 name: &#39;张三&#39;, salary:10000 }`</p>',71),s=[r];function p(l,i,u,d,g,c){return t(),n("div",null,s)}const y=e(o,[["render",p]]);export{m as __pageData,y as default};
