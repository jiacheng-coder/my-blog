import{_ as s,o as a,c as e,U as n}from"./chunks/framework.876add27.js";const l="/assets/ecos_homepage.pic.934e9a3c.jpg",t="/assets/ecos_detail.pic.4db58895.jpg",o="/assets/261681312067_.pic.09d75789.jpg",p="/assets/251681312066_.pic.b6b14bbc.jpg",c="/assets/ecos_person.pic.29c299ab.jpg",i="/assets/image-20230318095543200.057a42a7.png",r="/assets/image-20230318100219016.e81e2cb7.png",f=JSON.parse('{"title":"校园生态圈","description":"","frontmatter":{"tag":["Project"]},"headers":[],"relativePath":"Projects/ecosystem.md","filePath":"Projects/ecosystem.md","lastUpdated":1689602218000}'),d={name:"Projects/ecosystem.md"},m=n('<h1 id="校园生态圈" tabindex="-1">校园生态圈 <a class="header-anchor" href="#校园生态圈" aria-label="Permalink to &quot;校园生态圈&quot;">​</a></h1><blockquote><p>Uniapp + GraceUI 5</p></blockquote><h2 id="项目效果" tabindex="-1">项目效果 <a class="header-anchor" href="#项目效果" aria-label="Permalink to &quot;项目效果&quot;">​</a></h2><ol><li>首页</li></ol><img src="'+l+'" alt="image-20230318095543200" style="zoom:50%;"><ol start="2"><li>帖子详情</li></ol><img src="'+t+'" alt="image-20230318095543200" style="zoom:50%;"><ol start="3"><li>发帖</li></ol><img src="'+o+'" alt="261681312067_.pic" style="zoom:50%;"><img src="'+p+'" alt="251681312066_.pic" style="zoom:50%;"><ol start="4"><li>个人中心</li></ol><img src="'+c+'" alt="image-20230318095543200" style="zoom:50%;"><h2 id="消息界面" tabindex="-1">消息界面 <a class="header-anchor" href="#消息界面" aria-label="Permalink to &quot;消息界面&quot;">​</a></h2><p><img src="'+i+'" alt="image-20230318095543200"></p><h3 id="起因" tabindex="-1">起因 <a class="header-anchor" href="#起因" aria-label="Permalink to &quot;起因&quot;">​</a></h3><p>生态圈论坛作为一个UGC平台，帖子发布和消息通知是形成一个完整的闭环用户体验的必要组件。而目前生态圈仅支持微信H5的消息通知（通过服务号消息推送实现），而在微信 H5和QQ H5都没有内置消息通知模块。为了完善信息的体验，因此需要构建用户的消息接收功能。</p><h3 id="项目层级" tabindex="-1">项目层级 <a class="header-anchor" href="#项目层级" aria-label="Permalink to &quot;项目层级&quot;">​</a></h3><img src="'+r+`" alt="image-20230318100219016" style="zoom:50%;"><h3 id="红点逻辑" tabindex="-1">红点逻辑 <a class="header-anchor" href="#红点逻辑" aria-label="Permalink to &quot;红点逻辑&quot;">​</a></h3><p>底部tab栏的红点&gt;顶部tab栏的红点&gt;每条消息的红点</p><p>vuex中：</p><p>vuex里定义四个列表，分别是comments, likes, posts, systems</p><p>用来存放对应的消息通知</p><p>消息列表在进入h5时向后端请求数据</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">getters: {</span></span>
<span class="line"><span style="color:#A6ACCD;">  redPot: state =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    let index1 = state.comments.findIndex(item =&gt; item.checked === false)</span></span>
<span class="line"><span style="color:#A6ACCD;">    let index2 = state.likes.findIndex(item =&gt; item.checked === false)</span></span>
<span class="line"><span style="color:#A6ACCD;">    let index3 = state.posts.findIndex(item =&gt; item.checked === false)</span></span>
<span class="line"><span style="color:#A6ACCD;">    let index4 = state.systems.findIndex(item =&gt; item.checked === false)</span></span>
<span class="line"><span style="color:#A6ACCD;">    if (index1 === -1 &amp;&amp; index2 === -1 &amp;&amp; index3 === -1 &amp;&amp; index4 === -1) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      return false</span></span>
<span class="line"><span style="color:#A6ACCD;">    } else {</span></span>
<span class="line"><span style="color:#A6ACCD;">      return true</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>message页面中：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">watch: {</span></span>
<span class="line"><span style="color:#A6ACCD;">  redPot: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    handler(newVal, oldVal) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      console.log(&quot;redPot&quot;, newVal)</span></span>
<span class="line"><span style="color:#A6ACCD;">      if (newVal === false) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        uni.hideTabBarRedDot({ //隐藏红点</span></span>
<span class="line"><span style="color:#A6ACCD;">          index: 2</span></span>
<span class="line"><span style="color:#A6ACCD;">        })</span></span>
<span class="line"><span style="color:#A6ACCD;">      } else {</span></span>
<span class="line"><span style="color:#A6ACCD;">        uni.showTabBarRedDot({ //显示红点</span></span>
<span class="line"><span style="color:#A6ACCD;">          index: 2</span></span>
<span class="line"><span style="color:#A6ACCD;">        })</span></span>
<span class="line"><span style="color:#A6ACCD;">      }</span></span>
<span class="line"><span style="color:#A6ACCD;">    },</span></span>
<span class="line"><span style="color:#A6ACCD;">    immediate: true</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">},</span></span></code></pre></div><h3 id="亮点" tabindex="-1">亮点 <a class="header-anchor" href="#亮点" aria-label="Permalink to &quot;亮点&quot;">​</a></h3><blockquote><p>component标签+KeepAlive标签，降低了顶部tab栏的切换开销</p><ul><li><code>&lt;component&gt;</code>是一个用于渲染<strong>动态组件</strong>或元素的“元组件”</li><li><code>&lt;KeepAlive&gt;</code> 是一个内置组件，它的功能是在多个组件间动态切换时缓存被移除的组件实例。</li></ul></blockquote><p>component标签的核心就是动态绑定，项目通过动态绑定is属性的方式, 用来切换不同组件的显示或隐藏</p><p>当使用 <code>&lt;component :is=&quot;...&quot;&gt;</code> 来在多个组件间作切换时，被切换掉的组件会被卸载，当频繁切换时会产生不必要的渲染开销。我们可以通过<code>KeepAlive</code>强制被切换掉的组件仍然保持“存活”的状态。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;component :is=&quot;curComponent&quot;&gt;&lt;/component&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div>`,32),C=[m];function A(h,g,u,y,_,D){return a(),e("div",null,C)}const x=s(d,[["render",A]]);export{f as __pageData,x as default};
