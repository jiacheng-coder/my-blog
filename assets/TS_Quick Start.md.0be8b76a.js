import{_ as e,o as t,c as a,U as r}from"./chunks/framework.a7041386.js";const u=JSON.parse('{"title":"Quick Start","description":"","frontmatter":{"tag":["TS"]},"headers":[],"relativePath":"TS/Quick Start.md","filePath":"TS/Quick Start.md","lastUpdated":1690701222000}'),i={name:"TS/Quick Start.md"},c=r('<h1 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">​</a></h1><h2 id="ts和js的区别" tabindex="-1">TS和JS的区别 <a class="header-anchor" href="#ts和js的区别" aria-label="Permalink to &quot;TS和JS的区别&quot;">​</a></h2><p>TS和JS的区别是，TS是JS的一个<strong>超集</strong>，也就是说，JS有的TS都有，而TS还有一些JS没有的特性。最大的特性就是TS提供了<strong>类型系统</strong>³⁵，可以在<strong>编译时检查代码中的错误和不匹配</strong>。而JS是一个<strong>弱类型语言</strong>，只能在运行时发现错误。</p><p>另外，TS还<strong>支持ES6标准，可以编译成任意版本的JS代码</strong>³，从而解决不同浏览器和平台的兼容问题, TS还能获得更好的代码提示</p><h2 id="ts中type和interface的区别" tabindex="-1">TS中type和interface的区别 <a class="header-anchor" href="#ts中type和interface的区别" aria-label="Permalink to &quot;TS中type和interface的区别&quot;">​</a></h2><p>TS中type和interface的区别是一个常见的问题：</p><ul><li>type和interface都可以用来定义类型，但type还可以用来定义别名、联合类型、交叉类型等。</li><li>interface可以被多次声明并合并，而type只能被声明一次。</li><li>interface可以继承其他interface或class，而type不能继承class。</li><li>interface更符合面向对象的思想，而type更适合函数式编程。</li></ul><p>我来给你举几个例子。</p><ul><li>type可以定义别名，比如<code>type Name = string</code>，就是把string类型取一个别名叫Name。interface不能这样做。</li><li>type可以定义联合类型，比如<code>type Color = &#39;red&#39; | &#39;green&#39; | &#39;blue&#39;</code>，就是把三个字符串字面量类型合并成一个类型叫Color。interface不能这样做。</li><li>type可以定义交叉类型，比如<code>type Person = {name: string} &amp; {age: number}</code>，就是把两个对象类型合并成一个类型叫Person。interface不能这样做。</li><li>interface可以被多次声明并合并，比如<code>interface Animal {name: string}</code>和<code>interface Animal {age: number}</code>会被合并成一个接口Animal。type只能被声明一次。</li><li>interface可以继承其他interface或class，比如<code>interface Dog extends Animal {bark(): void}</code>或者<code>interface Car extends Vehicle {drive(): void}</code>。type不能继承class。</li></ul><p>我再尝试解释一下:</p><p>type和interface都是用来定义类型的，但是它们有不同的用途和特点。</p><p>type更像是一个工具，它可以让你给一个已有的类型取一个新的名字，或者把多个类型组合成一个新的类型。这样可以让你写出更简洁和灵活的代码。</p><p>interface更像是一个契约，它可以让你规定一个对象或函数必须具备哪些属性或方法。这样可以让你写出更清晰和安全的代码。</p><p>type和interface之间有一些重叠的功能，比如都可以定义对象类型。但是它们也有一些互斥的功能，比如type可以定义别名、联合类型、交叉类型等，而interface可以被多次声明并合并、继承其他interface或class等。</p>',14),n=[c];function o(s,l,p,d,S,f){return t(),a("div",null,n)}const m=e(i,[["render",o]]);export{u as __pageData,m as default};
