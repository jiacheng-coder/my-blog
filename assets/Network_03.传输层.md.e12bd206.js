import{_ as t,o as l,c as a,U as e}from"./chunks/framework.876add27.js";const i="/assets/image-20230307224921078.1009bf59.png",s="/assets/image-20230307230515771.913ed69b.png",o="/assets/image-20230307230049271.159580a0.png",r="/assets/image-20230307225538844.f030b48b.png",n="/assets/image-20230307230806237.9390dee7.png",g="/assets/image-20230307231915692.46aace70.png",p="/assets/image-20230307231949167.e30f8539.png",c="/assets/image-20230307232119984.340c25d5.png",d="/assets/image-20230307232541378.88ce607f.png",m="/assets/image-20230308182617679.97db2721.png",h="/assets/image-20230308183042963.378e1945.png",u="/assets/image-20230308183701180.88fe3483.png",b="/assets/image-20230308184512750.70636d72.png",P="/assets/image-20230308185200071.7f8b983e.png",_="/assets/image-20230308190109244-8273270.3b12239e.png",q="/assets/image-20230308190441755.3debf6f6.png",f="/assets/image-20230308192319143.334a1de5.png",T="/assets/image-20230308192426647.59859712.png",k="/assets/image-20230308192642853.7b098577.png",C="/assets/image-20230308192838134.62690e99.png",x="/assets/image-20230308193050629.578b4179.png",y="/assets/image-20230308193904946.126bf687.png",D="/assets/image-20230308194224992.34cb4747.png",U="/assets/image-20230308194859290.92b1d5ac.png",w="/assets/image-20230308194551701.3f4cdb6e.png",N="/assets/image-20230308194839132.095e1558.png",S="/assets/image-20230308200313754.3aea9371.png",v="/assets/image-20230308200553204.089f943d.png",V="/assets/image-20230308201216767.2217e98a.png",A="/assets/image-20230308211347641.eb60c4fd.png",B="/assets/image-20230308211649589.12c02f70.png",R="/assets/image-20230308211821160.087b3591.png",I="/assets/image-20230308213621162.7d02c186.png",$="/assets/image-20230308213800508.c99e67be.png",L=JSON.parse('{"title":"TCP与UDP","description":"","frontmatter":{"tag":["计算机网络"]},"headers":[],"relativePath":"Network/03.传输层.md","filePath":"Network/03.传输层.md","lastUpdated":1689602218000}'),j={name:"Network/03.传输层.md"},Y=e('<h1 id="tcp与udp" tabindex="-1">TCP与UDP <a class="header-anchor" href="#tcp与udp" aria-label="Permalink to &quot;TCP与UDP&quot;">​</a></h1><h2 id="tcp和udp的区别" tabindex="-1">TCP和UDP的区别 <a class="header-anchor" href="#tcp和udp的区别" aria-label="Permalink to &quot;TCP和UDP的区别&quot;">​</a></h2><p>TCP(<strong>传输控制协议</strong>)和UDP(<strong>用户数据报协议</strong>)是两种不同的传输层协议, 属于TCP/IP体系分层下的第二层, 是直接服务于应用层的协议</p><blockquote><p>面向连接, 可靠传输, 面向字节流是TCP的三大特点</p></blockquote><h3 id="无连接和面向连接" tabindex="-1">无连接和面向连接 <a class="header-anchor" href="#无连接和面向连接" aria-label="Permalink to &quot;无连接和面向连接&quot;">​</a></h3><p><img src="'+i+'" alt="image-20230307224921078"></p><h3 id="不可靠传输与可靠传输" tabindex="-1">不可靠传输与可靠传输 <a class="header-anchor" href="#不可靠传输与可靠传输" aria-label="Permalink to &quot;不可靠传输与可靠传输&quot;">​</a></h3><p><img src="'+s+'" alt="image-20230307230515771"></p><h3 id="面向应用报文和面向字节流" tabindex="-1">面向应用报文和面向字节流 <a class="header-anchor" href="#面向应用报文和面向字节流" aria-label="Permalink to &quot;面向应用报文和面向字节流&quot;">​</a></h3><p><img src="'+o+'" alt="image-20230307230049271"></p><h3 id="单播-多播与广播" tabindex="-1">单播,多播与广播 <a class="header-anchor" href="#单播-多播与广播" aria-label="Permalink to &quot;单播,多播与广播&quot;">​</a></h3><p><img src="'+r+'" alt="image-20230307225538844"></p><h3 id="协议首部" tabindex="-1">协议首部 <a class="header-anchor" href="#协议首部" aria-label="Permalink to &quot;协议首部&quot;">​</a></h3><p><img src="'+n+'" alt="image-20230307230806237"></p><h3 id="总结🔥" tabindex="-1">总结🔥 <a class="header-anchor" href="#总结🔥" aria-label="Permalink to &quot;总结🔥&quot;">​</a></h3><ol><li>TCP是<strong>面向连接</strong>的，即在发送数据之前需要先建立连接；UDP是无连接的，即发送数据之前不需要建立连接。</li><li>TCP提供<strong>可靠传输</strong>，即通过TCP传输的数据不会<strong>丢失、乱序或重复</strong>；UDP无法保证可靠传输，可能出现<strong>丢包、乱序或重复</strong>的情况。</li><li>TCP<strong>面向字节流</strong>，即将数据看作一个连续的字节序列；UDP<strong>面向应用报文</strong>，即将数据看作一个个独立的报文。</li><li>TCP有<strong>较长的首部</strong>（20字节），增加了传输开销；UDP有较短的首部（8字节），减少了传输开销。</li><li>TCP<strong>有流量控制和拥塞控制机制</strong>，可以根据网络状况和接收方能力调整发送速率；UDP没有这些机制，发送方可以<strong>以任意速率发送数据</strong>。</li></ol><blockquote><p>记忆表格如下:</p></blockquote><table><thead><tr><th>特征</th><th style="text-align:left;">TCP</th><th>UDP</th></tr></thead><tbody><tr><td>连接性</td><td style="text-align:left;">面向连接，需要先建立连接再发送数据¹²³</td><td>无连接，不需要建立连接就可以发送数据¹²³</td></tr><tr><td>可靠性</td><td style="text-align:left;">可靠，不会出现数据丢失、乱序或重复¹²³</td><td>不可靠，可能出现数据丢包、乱序或重复¹²³</td></tr><tr><td>数据单位</td><td style="text-align:left;">面向字节流，将数据看作一个连续的字节序列¹²³</td><td>面向报文，将数据看作一个个独立的报文¹²³</td></tr><tr><td>控制机制</td><td style="text-align:left;">有流量控制和拥塞控制机制，可以根据网络状况和接收方能力调整发送速率¹²³</td><td>没有流量控制和拥塞控制机制，发送方可以以任意速率发送数据¹²³</td></tr><tr><td>首部长度</td><td style="text-align:left;">较长（20字节），增加了传输开销¹²³</td><td>较短（8字节），减少了传输开销¹²³</td></tr></tbody></table><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><p>TCP和UDP的应用场景取决于数据传输的需求。</p><p>一般来说，TCP适合那些需要<strong>可靠、有序、完整</strong>的数据传输的应用，例如<strong>网页浏览、文件传输、电子邮件、远程登录</strong>等¹²³。UDP适合那些需要<strong>快速、实时、低延迟</strong>的数据传输的应用，例如<strong>视频会议、语音通话、在线游戏</strong>等¹²³。当然，这些应用场景并不是绝对的，有些应用可能会同时使用TCP和UDP，或者使用其他的协议。</p><h2 id="udp用户数据报协议" tabindex="-1">UDP用户数据报协议 <a class="header-anchor" href="#udp用户数据报协议" aria-label="Permalink to &quot;UDP用户数据报协议&quot;">​</a></h2><ul><li>UDP是一种无连接, 不可靠的<strong>传输层</strong>协议</li><li>支持快速, 无延迟的通信</li><li>不保证数据的安全性和完整性 <ul><li>发件人和收件人之间缺乏相互身份验证, 这确保了UDP的<strong>出色传输速度</strong>, 但UDP协议<strong>不能保证数据包的完整性和安全性</strong></li></ul></li><li>没有TCP的拥塞控制和三次握手的机制来保证可靠传输</li></ul><p>实时应用程序主要使用基于UDP的实时传输协议（RTP），与基本协议不同，它可以检测数据包丢失</p><p>UDP是<strong>传输层协议</strong>，是面向用户数据包协议，不保证可靠交付，<strong>没用TCP的拥塞控制和三次握手的机制</strong>保证可靠传传输，UDP<strong>尽最大努力交付</strong>。最少只有8个字节。UDP支持单播、组播、广播，UDP相对TCP更简单，传输的速率更快，所以通常可以用在实时性比较强的需求上，比如视频会议等。我们可以通过一些操作区增强UDP的可靠传输，腾讯的UDP+TCP机制，最简单的方式是通过 setsockopt来减小缓冲区的大小</p><p>UDP有以下特点：</p><ul><li>简单，轻量化</li><li>面向报文，保留报文边界</li><li>尽最大努力交付，不保证可靠性</li><li>没有拥塞控制，适合实时应用</li><li>支持一对一、一对多、多对一和多对多的交互通信</li></ul><h2 id="tcp流量控制" tabindex="-1">TCP流量控制 <a class="header-anchor" href="#tcp流量控制" aria-label="Permalink to &quot;TCP流量控制&quot;">​</a></h2><p>我们希望数据传输的快一些</p><p>但如果数据发送过快, 接收方来不及接收, 就会造成数据丢失</p><p>流量控制: 让发送方的发送速率不要太快, 要让接收方来得及接受</p><p>利用滑动窗口机制可以很方便的在TCP连接上实现对发送方的流量控制</p><ul><li>TCP接收方利用自己的<strong>接收窗口</strong>大小来限制发送方<strong>发送窗口</strong>的大小</li><li>TCP发送方收到接受方的<strong>零窗口通知</strong>后, 启动<strong>持续计时器</strong>; 持续计时器超时后, 向接受方发送<strong>零窗口探测报文</strong></li></ul><p><img src="'+g+'" alt="image-20230307231915692"></p><p><img src="'+p+'" alt="image-20230307231949167"></p><p>这种情况要用到零窗口探测报文</p><p><img src="'+c+'" alt="image-20230307232119984"></p><blockquote><p>零窗口探测报文也有重传计时器, 即使零窗口探测报文发送失效, 当重传计时器超时后, 重传计时器会被重传</p></blockquote><p>例题:</p><p><img src="'+d+'" alt="image-20230307232541378"></p><h2 id="tcp拥塞控制" tabindex="-1">TCP拥塞控制 <a class="header-anchor" href="#tcp拥塞控制" aria-label="Permalink to &quot;TCP拥塞控制&quot;">​</a></h2><blockquote><p>视频链接🔥: <a href="https://www.bilibili.com/video/BV1c4411d7jb/?p=61&amp;spm_id_from=333.880.my_history.page.click&amp;vd_source=d6271710c0aa78f4d90fc3f7028b8301" target="_blank" rel="noreferrer">5.5 TCP的拥塞控制_哔哩哔哩_bilibili</a></p></blockquote><p><img src="'+m+'" alt="image-20230308182617679"></p><p>TCP有四种拥塞控制算法, 分别是:</p><ul><li>慢开始</li><li>拥塞避免</li><li>快重传</li><li>快恢复</li></ul><p>下面介绍它们的基本原理, 假定如下条件:</p><ul><li>数据总是单向传送,另一个方向只传送确认</li><li>接受方总是有足够大的存储空间, 因而发送方发送窗口的大小由网络的拥塞程度来决定</li><li>以TCP最大报文段MSS的个数为讨论问题的单位, 而不是以字节为单位</li></ul><p><img src="'+h+'" alt="image-20230308183042963"></p><h3 id="慢开始和拥塞避免" tabindex="-1">慢开始和拥塞避免 <a class="header-anchor" href="#慢开始和拥塞避免" aria-label="Permalink to &quot;慢开始和拥塞避免&quot;">​</a></h3><p><img src="'+u+'" alt="image-20230308183701180"></p><blockquote><p>Note:</p><ul><li>&quot;慢开始&quot;是指一开始想网络注入的报文段少, 并不是指拥塞窗口cwnd增长速度慢</li><li>&quot;拥塞避免&quot;并非指能够完全避免拥塞, 而是指在拥塞避免阶段将拥塞窗口控制为按照现行规律增长, 使得网络比较不容易拥塞</li></ul></blockquote><h3 id="快重传和快恢复" tabindex="-1">快重传和快恢复 <a class="header-anchor" href="#快重传和快恢复" aria-label="Permalink to &quot;快重传和快恢复&quot;">​</a></h3><ul><li>慢开始和拥塞避免算法是1988年提出的TCP拥塞控制算法 (TCP Tahoe版本)</li><li>1990年又增加了两个新的拥塞控制算法改进TCP性能, 这就是快重传和快恢复 (TCP Reno版本) <ul><li>有时, <strong>个别报文段</strong>会在网络中丢失,但实际上网络<strong>并未发生拥塞</strong><ul><li>这将导致<strong>发送方</strong>超时重传, 并<strong>误认为</strong>网络发生了<strong>拥塞</strong></li><li>于是, 发送方把<strong>拥塞窗口</strong>cwnd又<strong>设置为1</strong>, 并<strong>错误的启动慢开始算法</strong>, 降低了传输效率</li><li><img src="'+b+'" alt="image-20230308184512750"></li></ul></li></ul></li><li>采用快重传算法可以让发送方<strong>尽早</strong>知道<strong>发生了个别报文段的丢失</strong></li><li>所谓快重传, 就是使得发送方<strong>尽快进行重传</strong>, 而不是<strong>等超时重传计时器超时</strong>再重传 <ul><li>要求接受方不要等待自己发送数据时才进行<strong>稍待确认</strong>, 而是要<strong>立即发送确认</strong></li><li>即使收到了<strong>失序的报文段</strong>也要立即发出对已收到的报文段的<strong>重复确认</strong></li><li>发送方一旦收到<strong>三个连续的重复确认</strong>, 就将相应报文段<strong>立即重传</strong>, 而不是<strong>等超时重传计时器超时</strong>再重传</li><li>对于<strong>个别丢失的报文段</strong>, 发送方不会出现超时重传, 也就不会误认为出现了拥塞 (进而降低拥塞窗口cwnd为1), 使用快重传算法可以使得整个网络的吞吐量提高约20%</li><li><img src="'+P+'" alt="image-20230308185200071"></li></ul></li><li>发送方一旦收到3个重复确认, 就知道现在只是丢失了个别的报文段, 于是不启动慢开始算法, 而是执行快恢复算法 <ul><li>发送方将慢开始门限ssthresh值调整为初始慢开始门限的一半, 更新拥塞窗口cwnd的值为当前慢开始门限的值, 开始执行拥塞避免算法</li><li>也有的是把快恢复开始时的cwnd值增大为ssthresh+3 <ul><li>3个报文段已经停留在接收方的数据缓存中</li><li>可见现在网络中减少了3个报文段, 因此可以适当把拥塞窗口扩大一些</li></ul></li></ul></li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p><img src="'+_+'" alt="image-20230308190109244"></p><blockquote><p>例题</p></blockquote><p><img src="'+q+'" alt="image-20230308190441755"></p><h2 id="tcp超时重传时间的选择" tabindex="-1">TCP超时重传时间的选择 <a class="header-anchor" href="#tcp超时重传时间的选择" aria-label="Permalink to &quot;TCP超时重传时间的选择&quot;">​</a></h2><p><img src="'+f+'" alt="image-20230308192319143"></p><p><img src="'+T+'" alt="image-20230308192426647"></p><p><img src="'+k+'" alt="image-20230308192642853"></p><blockquote><p>若出现超时重传, 则往返时间RTT会很难测量</p></blockquote><p><img src="'+C+'" alt="image-20230308192838134"></p><blockquote><p>示例</p></blockquote><p><img src="'+x+'" alt="image-20230308193050629"></p><h2 id="tcp可靠传输的实现" tabindex="-1">TCP可靠传输的实现 <a class="header-anchor" href="#tcp可靠传输的实现" aria-label="Permalink to &quot;TCP可靠传输的实现&quot;">​</a></h2><blockquote><p><a href="https://www.bilibili.com/video/BV1c4411d7jb/?p=63&amp;spm_id_from=pageDriver&amp;vd_source=d6271710c0aa78f4d90fc3f7028b8301" target="_blank" rel="noreferrer">5.7 TCP可靠传输的实现_哔哩哔哩_bilibili</a></p></blockquote><p><img src="'+y+'" alt="image-20230308193904946"></p><p><img src="'+D+'" alt="image-20230308194224992"></p><blockquote><p>TCP可靠传输的实现</p></blockquote><p><img src="'+U+'" alt="image-20230308194859290"></p><blockquote><p>例题</p></blockquote><p><img src="'+w+'" alt="image-20230308194551701"></p><p><img src="'+N+'" alt="image-20230308194839132"></p><h2 id="tcp运输连接管理" tabindex="-1">TCP运输连接管理 <a class="header-anchor" href="#tcp运输连接管理" aria-label="Permalink to &quot;TCP运输连接管理&quot;">​</a></h2><h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><ul><li>TCP是面向连接的协议, 它基于运输连接来传送TCP报文段</li><li>TCP运输连接的建立和释放是每一次面向连接的通信中必不可少的过程</li><li>TCP运输连接有三个阶段 <ul><li>建立TCP连接「三报文握手」</li><li>数据传输</li><li>释放TCP连接「四报文挥手」</li></ul></li><li>TCP的运输连接管理就是使得运输连接的建立和释放正常进行</li></ul><h3 id="tcp连接建立「三次握手」" tabindex="-1">TCP连接建立「三次握手」 <a class="header-anchor" href="#tcp连接建立「三次握手」" aria-label="Permalink to &quot;TCP连接建立「三次握手」&quot;">​</a></h3><blockquote><p>TCP连接建立要解决三个问题</p></blockquote><ul><li>使得TCP双方确认对方的存在</li><li>使得TCP双方协商一些参数 (如最大窗口值, 是否使用窗口扩大选项和时间戳选项等)</li><li>使得TCP双方能够运输实体资源 (如缓存大小, 链接表中的项目等) 进行分配</li></ul><blockquote><p>使用「三报文握手」建立连接</p></blockquote><p>TCP标志位, 当标志位取1时, 对应操作才有效</p><ul><li>SYN「同步位」</li><li>ACK「确认位」</li><li>ack「确认号字段」</li><li>seq「初始序号」</li><li>FIN「终止标志位」:用来释放TCP连接, 表面是TCP连接释放报文段</li><li>RST「复位标志位」:用来复位TCP连接</li><li>「紧急标志位」</li></ul><p>SYN=1,ACK=1说明这是一个<strong>TCP连接请求确认</strong>报文段, 确认号字段ack的值是对客户端seq初时序号的确认, 确认报文段中的seq是主机乙的初始序号, 可以随意指定</p><ul><li>TCP标准规定, SYN=1的报文段不能携带数据, 但是要消耗掉一个序号</li><li>普通的确认报文段如果不携带数据, 则不消耗序号</li></ul><p><img src="'+S+'" alt="image-20230308200313754"></p><blockquote><p>不能简化为两报文握手</p></blockquote><p><img src="'+v+'" alt="image-20230308200553204"></p><p>不能简化, 这是为了防止<strong>已经失效的连接请求报文段</strong>突然又传送到了TCP服务器, 因而导致<strong>服务器资源浪费</strong></p><blockquote><p>例题</p><p><img src="'+V+'" alt="image-20230308201216767"></p></blockquote><h3 id="tcp连接释放「四次挥手」" tabindex="-1">TCP连接释放「四次挥手」 <a class="header-anchor" href="#tcp连接释放「四次挥手」" aria-label="Permalink to &quot;TCP连接释放「四次挥手」&quot;">​</a></h3><blockquote><p>常规四次挥手流程</p></blockquote><p><img src="'+A+'" alt="image-20230308211347641"></p><blockquote><p>为什么有时间等待状态, 其目的是什么?</p></blockquote><p><img src="'+B+'" alt="image-20230308211649589"></p><ul><li><p>确保TCP服务器进程可以收到最后一个TCP确认报文段而进入关闭状态</p></li><li><p>使新的TCP连接中不会出现旧的报文段</p></li></ul><blockquote><p>TCP客户端出现故障 =&gt; 保活计时器</p></blockquote><p><img src="'+R+'" alt="image-20230308211821160"></p><h2 id="tcp报文段的首部格式" tabindex="-1">TCP报文段的首部格式 <a class="header-anchor" href="#tcp报文段的首部格式" aria-label="Permalink to &quot;TCP报文段的首部格式&quot;">​</a></h2><blockquote><p><a href="https://www.bilibili.com/video/BV1c4411d7jb/?p=66&amp;spm_id_from=pageDriver&amp;vd_source=d6271710c0aa78f4d90fc3f7028b8301" target="_blank" rel="noreferrer">5.9 TCP报文段的首部格式_哔哩哔哩_bilibili</a></p></blockquote><ul><li>为了实现可靠传输, TCP采用了<strong>面向字节流</strong>的方式</li><li>但TCP在发送数据时, 是从发送缓存中取出一部分或者全部字节并给其添加一个首部使之成为<strong>TCP报文段</strong>后进行发送 <ul><li>一个TCP报文段由<strong>首部</strong>和<strong>数据载荷</strong>两部分构成</li><li>TCP的<strong>全部功能</strong>都体现在它<strong>首部中各字段</strong>的作用</li></ul></li></ul><p><img src="'+I+'" alt="image-20230308213621162"></p><p>扩展首部的填充部分: 确保报文段首部能被4整除 (因为数据偏移字段, 也就是首部长度字段, 是以4字节为单位的)</p><p><img src="'+$+'" alt="image-20230308213800508"></p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><h3 id="单工-半双工-全双工" tabindex="-1">单工,半双工,全双工 <a class="header-anchor" href="#单工-半双工-全双工" aria-label="Permalink to &quot;单工,半双工,全双工&quot;">​</a></h3><blockquote><p>单工、半双工和全双工是三种不同的数据传输模式。</p></blockquote><ul><li>单工：数据只能在一个方向上传输，有固定的发送者和接收者。例如：电视、广播。</li><li>半双工：数据可以在两个方向上传输，但是同一时间只能在一个方向上传输，实际上是切换的单工。例如：对讲机、集线器。</li><li>全双工：数据可以在两个方向上同时传输，需要独立的发送端和接收端。例如：电话、交换机。</li></ul><h3 id="加密算法" tabindex="-1">加密算法 <a class="header-anchor" href="#加密算法" aria-label="Permalink to &quot;加密算法&quot;">​</a></h3><blockquote><p>对称加密和非对称加密算法</p></blockquote><ul><li>对称加密中加密和解密使用的秘钥是同一个；非对称加密中采用两个密钥，一般使用<strong>公钥进行加密，私钥进行解密</strong>。</li><li>对称加密解密的速度比较快，非对称<strong>加密和解密花费的时间长、速度相对较慢</strong>。</li><li>非对称加密可以用于<strong>数字签名和数字鉴别</strong>，而对称加密不可以。</li></ul><p>你可以参考下面这个表格来比较两种算法的优缺点：</p><table><thead><tr><th style="text-align:center;">对称加密</th><th style="text-align:center;">非对称加密</th></tr></thead><tbody><tr><td style="text-align:center;">优点：速度快、效率高</td><td style="text-align:center;">优点：安全性高、可用于认证</td></tr><tr><td style="text-align:center;">缺点：秘钥传输不安全、无法鉴别身份</td><td style="text-align:center;">缺点：计算复杂、速度慢</td></tr></tbody></table><h3 id="数字签名和数字鉴别" tabindex="-1">数字签名和数字鉴别 <a class="header-anchor" href="#数字签名和数字鉴别" aria-label="Permalink to &quot;数字签名和数字鉴别&quot;">​</a></h3><blockquote><p>数字签名和数字鉴别分别用于</p><ul><li>保证数字信息的真实性</li><li>保证数字信息完整性</li></ul></blockquote><table><thead><tr><th style="text-align:left;">项目</th><th style="text-align:left;">数字签名</th><th style="text-align:left;">数字鉴别</th></tr></thead><tbody><tr><td style="text-align:left;">定义</td><td style="text-align:left;">一种类似写在纸上的普通的物理签名，但是使用了公钥加密领域的技术实现，用于鉴别数字信息的方法。</td><td style="text-align:left;">一种利用对称加密或单向散列函数生成一个固定长度的信息摘要，附在原始信息后面，用于验证信息是否被篡改或伪造的方法。</td></tr><tr><td style="text-align:left;">加密方式</td><td style="text-align:left;">非对称加密</td><td style="text-align:left;">对称加密或单向散列函数</td></tr><tr><td style="text-align:left;">加密和解密方法</td><td style="text-align:left;">私钥进行加密，公钥进行解密</td><td style="text-align:left;">秘钥或散列函数进行加密和解密</td></tr><tr><td style="text-align:left;">功能作用</td><td style="text-align:left;">证明信息的来源、防止抵赖和伪造。</td><td style="text-align:left;">证明信息的完整性。</td></tr><tr><td style="text-align:left;">应用场景</td><td style="text-align:left;">电子邮件、电子合同、电子发票等都可以使用数字签名来确认发送者的身份和信息的真实性。</td><td style="text-align:left;">网络传输、文件存储、数据备份等都可以使用数字鉴别来验证信息是否被修改或损坏。</td></tr></tbody></table><h3 id="中间人攻击" tabindex="-1">中间人攻击 <a class="header-anchor" href="#中间人攻击" aria-label="Permalink to &quot;中间人攻击&quot;">​</a></h3><blockquote><p>攻击者作为客户端和服务器之间的桥梁、双向获取信息并且篡改其内容</p></blockquote><p>中间人攻击是指攻击者通过<strong>与客户端和目标服务器</strong>「同时」建立连接，作为客户端和服务器的<strong>桥梁</strong>，处理双方的数据，整个会话期间的内容<strong>几乎是完全</strong>被攻击者控制的。攻击者可以<strong>拦截双方的会话</strong>并且<strong>插入新的数据内容</strong>。</p><p>中间人攻击的过程：</p><ol><li>服务器向客户端发送公钥。</li><li>攻击者截获公钥，保留在自己手上。</li><li>然后攻击者自己生成一个伪造的公钥，发给客户端。</li><li>客户端收到伪造的公钥后，生成加密哈希（此时加密内容是对称加解密秘钥） 值发给攻击者服务器。</li><li>攻击者获得加密哈希值，用自己的私钥解密获得真秘钥。</li><li>同时生成假的加密哈希值，发给服务器。</li><li>服务器用私钥解密获得假秘钥。</li><li>服务器用假秘钥加密传输信息。</li></ol>',121),E=[Y];function K(F,J,M,O,z,G){return l(),a("div",null,E)}const Q=t(j,[["render",K]]);export{L as __pageData,Q as default};
