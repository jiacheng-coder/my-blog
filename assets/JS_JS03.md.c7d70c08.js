import{_ as s,o as a,c as n,U as l}from"./chunks/framework.a7041386.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{"tag":["JS"]},"headers":[],"relativePath":"JS/JS03.md","filePath":"JS/JS03.md","lastUpdated":1689602218000}'),t={name:"JS/JS03.md"},p=l(`<h2 id="this指向" tabindex="-1">this指向 <a class="header-anchor" href="#this指向" aria-label="Permalink to &quot;this指向&quot;">​</a></h2><p>以下是几种情况下 <strong>函数的this指向</strong> 及说明：</p><table><thead><tr><th>调用方式</th><th>this 指向</th><th>说明</th></tr></thead><tbody><tr><td>作为对象的方法调用</td><td>对象本身</td><td>当一个函数被作为对象的一个属性调用时，this 指向该对象</td></tr><tr><td>作为普通函数调用</td><td>全局对象</td><td>当函数不作为对象的属性被调用时，this 指向全局对象（在浏览器中是 window 对象）</td></tr><tr><td>作为构造函数调用</td><td>新创建的对象实例</td><td>当一个函数被用作构造函数时，this 指向新创建的对象实例</td></tr><tr><td>使用 call() 或 apply() 方法调用</td><td>手动指定</td><td>当使用 call() 或 apply() 方法调用函数时，this 可以手动指定为第一个参数（即绑定 this 的对象）</td></tr></tbody></table><p>需要注意的是，箭头函数中的 this 与普通函数不同。箭头函数中的 this 指向在定义时确定，而不是在运行时确定。箭头函数中的 this 始终指向创建函数时的上下文对象。</p><p>此外，当使用严格模式时，如果没有明确指定 this 的值，它将保持 undefined。</p><h2 id="严格模式" tabindex="-1">严格模式 <a class="header-anchor" href="#严格模式" aria-label="Permalink to &quot;严格模式&quot;">​</a></h2><p>JavaScript 严格模式是一种特殊的执行模式，它允许您以更严格的方式编写 JavaScript 代码。以下是几个严格模式的特点：</p><table><thead><tr><th>特点</th><th>说明</th></tr></thead><tbody><tr><td>消除了 JavaScript 语言中的一些不适合开发大型应用程序的缺陷</td><td>严格模式修复了一些 JavaScript 中的历史错误和不良实践。</td></tr><tr><td>防止意外声明全局变量</td><td>在严格模式下，意外声明全局变量将抛出错误。这有助于避免命名冲突和其他错误。</td></tr><tr><td>禁止删除变量</td><td>在严格模式下，使用 delete 操作符删除变量将抛出错误。</td></tr><tr><td>禁止使用某些语法</td><td>在严格模式下，一些不安全的语法被禁用，例如 with 语句和 eval 函数。</td></tr><tr><td>禁止修改变量只读属性</td><td>在严格模式下，尝试修改只读属性的代码将抛出错误。</td></tr><tr><td>强制使用函数的参数名称</td><td>在严格模式下，如果函数使用了相同名称的参数，则会抛出错误。</td></tr></tbody></table><p>需要注意的是，启用严格模式可能会导致一些代码在不同的 JavaScript 引擎中以不同的方式运行，因此在使用严格模式时应格外小心。此外，严格模式不是必需的，但它可以帮助您编写更好的代码，提高代码质量和性能。</p><h2 id="call-apply和bind" tabindex="-1">call,apply和bind <a class="header-anchor" href="#call-apply和bind" aria-label="Permalink to &quot;call,apply和bind&quot;">​</a></h2><p>假设我们有一个函数和一个对象：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">greet</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Alice</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果我们想用person对象作为this来调用greet函数，我们可以用call或apply方法：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">greet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(person</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Hello Alice</span></span>
<span class="line"><span style="color:#A6ACCD;">greet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#A6ACCD;">(person</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Hi Alice</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注意call和apply的第一个参数都是person，表示this的值，而后面的参数是传给greet函数的。区别在于call接受多个参数，而apply接受一个数组。</p><p>如果我们想创建一个新的函数，让它总是用person对象作为this来调用greet函数，我们可以用bind方法：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> boundGreet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> greet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#A6ACCD;">(person)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 返回一个新的函数</span></span>
<span class="line"><span style="color:#82AAFF;">boundGreet</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hey</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Hey Alice</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注意bind不会立即执行greet函数，而是返回一个新的函数，这个函数绑定了person作为this。这样我们就可以在以后任何时候调用这个新的函数。</p>`,18),e=[p];function o(r,c,i,d,y,D){return a(),n("div",null,e)}const C=s(t,[["render",o]]);export{A as __pageData,C as default};
